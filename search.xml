<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ZQ语录合集</title>
    <url>/202309308fbccf9b/</url>
    <content><![CDATA[<p>在此征集ZQ语录，可在下方的评论区补充：（可能有点慢）</p>
<img src="/202309308fbccf9b/3f93aeb94f147261af36fd6772df1386.jpeg" class title="3f93aeb94f147261af36fd6772df1386">
]]></content>
      <tags>
        <tag>2121</tag>
      </tags>
  </entry>
  <entry>
    <title>基于hexo生成的网址短链接解决中文域名转码问题的方案</title>
    <url>/202309308c8465b4/</url>
    <content><![CDATA[<p>在经历博客网站一段时间以后，需要将文章分享给朋友。</p>
<p>它的地址栏正常显示的网址一旦复制后就变成了一串串冗余的数字。</p>
<p>经过仔细研究以后，发现这和中文域名有关。</p>
<span id="more"></span>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>如果使用中文进行创建文档的话，虽然在地址栏仍然能正常显示。但是如果想要将网址复制下来分享给他人，就会将中文强行转换成十六进制数字。</p>
<img src="/202309308c8465b4/908b17d9399abf7487961ead5124d59b.png" class title="908b17d9399abf7487961ead5124d59b">

<p>但是复制后变成：</p>
<p><a href="https://windeling.github.io/2023/09/23/%E5%85%B3%E4%BA%8E%E6%89%8B%E8%A1%A8ADB%E8%B0%83%E8%AF%95%E7%9A%84%E5%BA%94%E7%94%A8%E5%88%86%E6%9E%90%E4%B8%8E%E6%95%99%E7%A8%8B">https://windeling.github.io/2023/09/23/%E5%85%B3%E4%BA%8E%E6%89%8B%E8%A1%A8ADB%E8%B0%83%E8%AF%95%E7%9A%84%E5%BA%94%E7%94%A8%E5%88%86%E6%9E%90%E4%B8%8E%E6%95%99%E7%A8%8B</a></p>
<blockquote>
<p>看得出来是很杂乱.                           ——Amberoid</p>
</blockquote>
<p>而且默认生成的url结构其实并不是非常合理。</p>
<p>对于搜索引擎来说，一般只会抓取主域名往下的三层url。</p>
<p>在网站的域名中，搜索引擎正好抓取到日期就停止了，并没有抓取到文章的详细内容概要，也就是题目。</p>
<p>所以要加入搜索引擎，务必要修改网站的URL。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>既然问题在于网址，因为网址是由站点配置文件生成的，所以去站点配置文件进行查找配置。</p>
<img src="/202309308c8465b4/908b17d9399abf7487961ead5124d59b.png" class title="c6b3d13fabb0fb4527d2f979fba6fbf6">

<p>可以看到默认生成的域名第三级正好是日期。</p>
<p>所以应该设置一个算法，让对每篇文章都生成一个唯一的编号。</p>
<p>推荐安装 <code>hexo-abbrlink</code> 插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>然后在站点配置文件里面插入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure>

<p>将<code>permalink</code>修改为<code>permalink: archives/:year:month:day:abbrlink/</code></p>
<img src="/202309308c8465b4/image-20230930152501603.png" class title="image-20230930152501603">

<p>这样就会生成一个只有一层的url了，简洁明了，对搜索引擎也很友好。</p>
<p>而且这个<code>abbrlink</code>可以在文章内容自主修改，可以对一些特殊的文章进行自主编号，方便分享。</p>
<blockquote>
<p>这个算法的核心似乎是日期，因此从理论来说，每一篇文章的编号一定是不同的。</p>
<p>所以理论上来说甚至可以把年月日给删除。<img src="/202309308c8465b4/image-20230930161614481.png" class title="image-20230930161614481"></p>
</blockquote>
<img src="/202309308c8465b4/image-20230930153943652.png" class title="image-20230930153713391">

<h2 id="abbrlink的长度"><a href="#abbrlink的长度" class="headerlink" title="abbrlink的长度"></a>abbrlink的长度</h2><p><strong>算法为主，进制为辅。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https://post.zz173.com/posts/66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https://post.zz173.com/posts/65535.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https://post.zz173.com/posts/8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https://post.zz173.com/posts/1690090958.html</span><br><span class="line"></span><br><span class="line">//引用的测试长度</span><br></pre></td></tr></table></figure>



<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><img src="/202309308c8465b4/image-20230930153943652.png" class title="image-20230930153943652">

<p>可以看出URL结构大幅减少。</p>
<img src="/202309308c8465b4/image-20230930161614481.png" class title="image-20230930161629320">

<p>再删除年月日后，更为简介好记。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础搭建个人博客（柒）</title>
    <url>/20230930d427d50c/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>零基础搭建个人博客（陆）</title>
    <url>/20230930754a52b1/</url>
    <content><![CDATA[<h1 id="发布文章与快速部署"><a href="#发布文章与快速部署" class="headerlink" title="发布文章与快速部署"></a>发布文章与快速部署</h1><p>经过前面几章的内容，博客的基本框架和主题已经确定下来。</p>
<p>那么接下来接下进入到如何发布文章的说明了。</p>
<span id="more"></span>

<h1 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h1><p>发布文章前首先要创建文章。</p>
<p>只需要在博客根目录下运行git工具，输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new 文章名字</span><br><span class="line">//或简写为</span><br><span class="line">hexo n 文章名字</span><br></pre></td></tr></table></figure>

<p>那么就会在路径<code>/source/_post</code>中建立一个新的markdown文件。</p>
<img src="/20230930754a52b1/image-20230930132113754.png" class title="image-20230930132113754">

<img src="/20230930754a52b1/image-20230930132152819.png" class title="image-20230930132152819">

<h1 id="文章写作"><a href="#文章写作" class="headerlink" title="文章写作"></a>文章写作</h1><p>由于是md文件，所以可以使用markdown语法来进行写作。</p>
<p><a href="https://boredliam.github.io/2023/08/18/Computer/markdown/">markdown语法 | Liam’s boring life (boredliam.github.io)</a></p>
<p>markdown语法非常容易掌握，也适合写作。</p>
<h1 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h1><p>写完文章以后将其保存，并重新回到博客根目录。</p>
<p>按照通常要输入三个命令，即：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>这个命令较为繁琐，所以我们可以合成这三个命令，使之一步到位。</p>
<p>将其合成为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g -f -d</span><br></pre></td></tr></table></figure>

<p>其中g的含义保持不变，是编译的意思，f则是在表示编译前清除缓存文件，d表示部署。</p>
<img src="/20230930754a52b1/image-20230930132856475.png" class title="image-20230930132856475">

<p>运用这个方法，可以减少输入的次数，使部署更为轻松。</p>
<h1 id="会遇到的问题"><a href="#会遇到的问题" class="headerlink" title="会遇到的问题"></a>会遇到的问题</h1><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>虽然hexo是支持使用markdown语法格式引入图片的，如<code>![]()</code>，但是经过我们的测试发现如果不进行一定的修改，基本上是无法显示出图片的。</p>
<p>这个问题将会在第七章讲述修复与解决的办法。</p>
<h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><p>如果使用中文进行创建文档的话，虽然在地址栏仍然能正常显示。但是如果想要将网址复制下来分享给他人，就会将中文强行转换成十六进制数字。</p>
<img src="/20230930754a52b1/908b17d9399abf7487961ead5124d59b.png" class title="908b17d9399abf7487961ead5124d59b">

<p>但是复制后变成：</p>
<p><a href="https://windeling.github.io/2023/09/23/%E5%85%B3%E4%BA%8E%E6%89%8B%E8%A1%A8ADB%E8%B0%83%E8%AF%95%E7%9A%84%E5%BA%94%E7%94%A8%E5%88%86%E6%9E%90%E4%B8%8E%E6%95%99%E7%A8%8B">https://windeling.github.io/2023/09/23/%E5%85%B3%E4%BA%8E%E6%89%8B%E8%A1%A8ADB%E8%B0%83%E8%AF%95%E7%9A%84%E5%BA%94%E7%94%A8%E5%88%86%E6%9E%90%E4%B8%8E%E6%95%99%E7%A8%8B</a></p>
<p>是不是感觉非常的杂乱？</p>
<p>而且默认生成的url结构其实并不是非常合理。</p>
<p>对于搜索引擎来说，一般只会抓取主域名往下的三层url。</p>
<p>在网站的域名中，搜索引擎正好抓取到日期就停止了，并没有抓取到文章的详细内容。</p>
<p>所以要加入搜索引擎，务必要修改自己的URL。</p>
<p>这个问题，请参照第七章的方案：</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这一章主要讲述了如何发布文章，那么如果想对文章界面以及博客界面进行美化的话，请再往下看第七章。</p>
<p>第七章是非常重要的一章，也是决定博客个性化程度的一章。</p>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础搭建个人博客（伍）</title>
    <url>/2023093017f4661a/</url>
    <content><![CDATA[<h1 id="设置Hexo主题"><a href="#设置Hexo主题" class="headerlink" title="设置Hexo主题"></a>设置Hexo主题</h1><p>在成功安装完node.js和hexo后，博客大房子就已经搭建起来了，拥有了最基本的框架。</p>
<p>但是仅仅只有框架是远远不够的，我们还需要对内部进行「装修」这一项操作，换而言之就是使用主题。</p>
<span id="more"></span>



<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>主题，顾名思义，是显示出一个网站风格的一段程序。</p>
<p>主题的主要构成是CSS和JavaScript，通过定义网页动画和行为来与用户进行交互和展示。</p>
<p>所以选择一个适合的主题对于网站风格来说是很关键的一步。</p>
<h1 id="常用的主题"><a href="#常用的主题" class="headerlink" title="常用的主题"></a>常用的主题</h1><p>随着hexo主题的不断使用，更多的主题也随之涌现出来，目前流行的主题按流行度降序排列：</p>
<ul>
<li>NexT，最为广泛使用的主题<ul>
<li>优点：广泛使用，教程丰富，步骤完善，界面美观。</li>
<li>不足：可拓展性较差，修改复杂，站点配置文件冗长。</li>
</ul>
</li>
<li>yilia和yilia-plus，简约主题<ul>
<li>优点：同样广泛使用，且站点配置文件有中文注释，非常易于上手，可拓展性高，易于自主实现想法。</li>
<li>不足：背景的搭配决定了很大的体验感受，较为简洁（左右板块）。</li>
</ul>
</li>
<li>keep，butterfly等主题<ul>
<li>适用人数居中，教程较多，若对前面均不满意可自行选择。</li>
<li>较为美观，但同样可拓展性较差。</li>
</ul>
</li>
<li>Maupassant，超简约风主题<ul>
<li>优点：简约</li>
<li>不足：简约<ul>
<li>配置参考：<a href="https://www.haomwei.com/technology/maupassant-hexo.html">大道至简——Hexo简洁主题推荐 </a></li>
</ul>
</li>
</ul>
</li>
<li>Tranquilpeak<ul>
<li>类似yilia，但是展开全文后去掉了左侧的信息控制区。</li>
<li>不足：使用者较少，拓展教程较少。</li>
</ul>
</li>
</ul>
<h1 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h1><p>选择完主题以后，我们就要将主题安装到自己的仓库里。</p>
<p>由于主题的代码位于Github的仓库，所以可以用克隆仓库的命令将其克隆到自己的博客里。</p>
<h2 id="克隆主题"><a href="#克隆主题" class="headerlink" title="克隆主题"></a>克隆主题</h2><p>由于hexo要求主题必须在<code>theme</code>文件夹里，所以可以选择在<code>theme</code>文件夹里进行克隆操作。或者在博客根目录下进行克隆操作以后，将路径转换到文件夹内。</p>
<p>如果选择后者，就要在代码尾部加上<code>theme/next</code>。</p>
<p>也就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone (https://git) theme/next</span><br></pre></td></tr></table></figure>

<blockquote>
<p>严格来说，theme文件夹里的主题文件夹的名字并不一定要求是主题的名字，但为了使调用时代码可读性高，建议使用主题的名字。</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>NexT主题克隆命令</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>

<p>yilia主题克隆命令</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/XPoet/hexo-theme-keep</span><br></pre></td></tr></table></figure>

<p>keep主题克隆命令</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/iamjerryw/hexo -theme -butterfly.git</span><br></pre></td></tr></table></figure>

<p>butterfly主题克隆命令</p>
<hr>
<p>其余的主题请自行搜索。</p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><h3 id="配置文件的区分"><a href="#配置文件的区分" class="headerlink" title="配置文件的区分"></a>配置文件的区分</h3><p>现在由于克隆了主题，博客程序便会出现了两个配置文件配置文件<code>_config.yml</code>。</p>
<p>第一个配置文件位于博客根目录下，其中的信息是对hexo框架的设置。</p>
<p>第二个配件位于主题的目录内，那个其中的信息是对主题版式的设置。</p>
<p><strong>为了区分这两个配置文件，将第一个配置文件称为<code>站点配置文件</code>，第二个配置文件称为<code>主题配置文件</code>。</strong></p>
<p>如前文所述，站点配置文件主要负责网站的底层逻辑操控,主题配置文件主要负责对网站页面的设计和操作。</p>
<p>当后文或网上的教程没有指明是哪个配置文件时，请仔细思考:此操作到底是针对主题还是针对底层逻辑？</p>
<p>例如：后文中会有生成短链接的教程，但许多教程没有指明是哪个配置文件。</p>
<p>仔细思考一下，由于链接是网站的根本基础，并没有针对主题内进行特殊的样式改变，所以应该在站点配置文件修改。</p>
<h3 id="修改站点配置文件中的主题信息"><a href="#修改站点配置文件中的主题信息" class="headerlink" title="修改站点配置文件中的主题信息"></a>修改站点配置文件中的主题信息</h3><img src="/2023093017f4661a/image-20230930094047244.png" class title="image-20230930094047244">

<p>在配置文件中搜索<code>theme</code>，在后面添加上你的<strong>主题文件的文件名</strong>。</p>
<blockquote>
<p>注意：如果在上一步中将文件夹命名为其他名字，如mytheme，则填写的是文件夹的名字，冒号后的字符串相当于路径中的一个目录，所以推荐文件夹名称和主题名称相符合。</p>
</blockquote>
<blockquote>
<p>注意：yml文件中冒号： 后应包含一个空格。</p>
</blockquote>
<p>至此，你的主题已经成功应用，可通过<code>hexo s</code>查看或<code>hexo d</code>部署。</p>
<h2 id="设置站点信息"><a href="#设置站点信息" class="headerlink" title="设置站点信息"></a>设置站点信息</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title:   #标题</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description:  #简介或者格言</span><br><span class="line">keywords:</span><br><span class="line">author:     #作者</span><br><span class="line">language: zh-CN     #主题语言</span><br><span class="line">timezone: Asia/Shanghai    #中国的时区</span><br></pre></td></tr></table></figure>

<p>在站点配置文件中完善这些信息便可。</p>
<h1 id="关于子主题的提醒"><a href="#关于子主题的提醒" class="headerlink" title="关于子主题的提醒"></a>关于子主题的提醒</h1><p>有部分主题中还有多个主题，如NexT。</p>
<p>在这其中只能选择一个主题，其余的需要用#注释掉。</p>
<p>NexT默认选择了一个主题Muse，若你想换其他主题，又不把这里的#加上，会在hexo g这一步报错。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>至此，你已经完成了基于hexo的个人博客搭建！</p>
<p>如果对附加功能没有要求，便可投入使用。</p>
<p>接下来的第六章，将会讲述如何完善各个主题。</p>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础搭建个人博客（叁）</title>
    <url>/202309296d16578d/</url>
    <content><![CDATA[<h1 id="域名的购买与解析"><a href="#域名的购买与解析" class="headerlink" title="域名的购买与解析"></a>域名的购买与解析</h1><p>在我们建立与Github仓库的联系以后，实际上我们已经拥有了一个属于自己的个人网页。</p>
<p>接下来就可以选择是否绑定属于自己的域名。</p>
<p>最好在博客正式投入前完成。域名购买的决定，如果在投入使用之后再选择绑定域名，会导致一些问题。</p>
<span id="more"></span>

<h1 id="绑定域名时间过晚的问题"><a href="#绑定域名时间过晚的问题" class="headerlink" title="绑定域名时间过晚的问题"></a>绑定域名时间过晚的问题</h1><p>如果绑定域名的时间过晚，但是之前的原有域名example.github.io已经被搜索引擎收录。</p>
<p>那么将会导致引擎收入的页面有可能出现无法重定向打开的情况，而且会出现一些冗余结果。</p>
<p>而且会导致文章浏览次数统计，访问量，访客数量都会清零。</p>
<p>所以尽可能在正式投入使用之前决定是否绑定域名。</p>
<h1 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h1><p>域名是自由的，任何人都可以拥有任意的域名。但是域名转换服务器只会将有协议的域名和IP地址进行转换。</p>
<p>因此严格的准确的说，购买域名其实是在购买域名和IP地址的转换权。</p>
<p>想深入了解请浏览这篇文章：<a href="http://www.windeling.com.cn/2023092958a4be22/">关于github个人网站绑定域名的原理分析和操作 | Windeling</a></p>
<h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><p>国内比较著名的平台有<code>阿里云</code>和<code>腾讯云</code>。</p>
<p>根据自己的喜好即可，域名价格大多相同。</p>
<h2 id="域名后缀"><a href="#域名后缀" class="headerlink" title="域名后缀"></a>域名后缀</h2><p>常用的域名后缀有<code>.com</code> <code>.com.cn</code> <code>.top</code> <code>.net</code></p>
<p><code>.com</code>：最普遍和为人所知的域名，价格在￥70-80不等。</p>
<p><code>.com.cn</code>：强调<strong>中国公司</strong>，需要中国证件购买，￥35-40。</p>
<p><code>.top</code>：最便宜的域名后缀，￥20-25。</p>
<p><code>.net</code>：网络的首字母，价格在￥50-60左右。</p>
<p>所有域名都是以年作为单位购买的，所以平均每月约2-7元。</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote>
<p>用阿里云平台举例，说明大致流程，其他平台的UI设计可能有所不同，但尽量保证做到相同的设置。</p>
</blockquote>
<p>首先，创建账号。</p>
<img src="/202309296d16578d/image-20230929220628912.png" class>

<p>接着进行实名认证，注意，阿里云有多个实名认证，需要仔细区分：</p>
<ul>
<li><p>账号实名认证</p>
</li>
<li><p>实名认证模版认证</p>
<img src="/202309296d16578d/001ff866316cdd498257ad3792cf8d35.png" class>
</li>
<li><p>域名实名认证</p>
</li>
</ul>
<p>对于域名，需要的是域名实名认证，需要账号实名认证作为前提。</p>
<p>由于阿里云和支付宝是同一平台的，所以登录，认证，支付都基本上要使用支付宝，请提前做好准备。</p>
<p>但是，如果只认证这个域名，是不用<strong>实名认证模版认证</strong>的，此模版认证后可以通用，虽然更方便，但是审核周期更长，而且个人用户一般只会购买一个域名，这个模版更多是针对有大量业务的企业的。</p>
<p>而且模版认证不等于域名认证，还要再次提交认证。</p>
<p>所以进行两个认证就可以了。</p>
<ul>
<li>账号实名认证（支付宝扫码）（瞬时）——域名实名认证（填写信息）——审核信息（2-5分钟）</li>
<li>账号实名认证（支付宝扫码）（瞬时）——模版实名认证（填写信息）——审核信息（5-7小时）——通过模版进行域名认证（瞬时）</li>
</ul>
<blockquote>
<p><strong>注意，由于中国政府的关于互联网的相关规定，域名如不实名认证，将会被注册局暂停解析服务，相当于不能使用</strong></p>
<img src="/202309296d16578d/b7b8dbc26f7f67387b96ecab57c7c959.png" class>

<img src="/202309296d16578d/8b4219fce9254e93ba4003ef51ced9f9.png" class>
</blockquote>
<p>认证以后，就可以添加解析了。</p>
<h1 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h1><p>域名的解析需要转到控制台，填写如下记录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A @ 185.199.108.153</span><br><span class="line">A @ 185.199.109.153</span><br><span class="line">A @ 185.199.110.153</span><br><span class="line">A @ 185.199.111.153</span><br><span class="line">A WWW 185.199.108.153</span><br><span class="line">A WWW 185.199.109.153</span><br><span class="line">A WWW 185.199.110.153</span><br><span class="line">A WWW 185.199.111.153</span><br></pre></td></tr></table></figure>

<p>A代表是IPv4地址，@代表不加www的域名，如example.com，www代表域名的全称，如<a href="http://www.example.com/">www.example.com</a></p>
<p>这样无论访问者加不加WWW，都可以解析到正确的IP。</p>
<p>详细的分析参见<a href="http://www.windeling.com.cn/20230929e2706666/">关于网络www前缀对DNS解析影响的分析 | Windeling</a></p>
<blockquote>
<p>注意：如果只添加@或www，则使用另一种方式将无法访问！！</p>
</blockquote>
<p>这四个IP地址是Github的常用IP，最好全部添加，万一Github换用服务器（经常性行为），就会导致无法访问。</p>
<img src="/202309296d16578d/image-20230929112950553.png" class>

<img src="/202309296d16578d/image-20230929112957898.png" class title="image-20230929112957898">

<p>而且所有的github.io的个人网站的IP地址其实都是相同的。</p>
<p>原因在于这所谓的「网站」其实都是github服务器上的一个仓库，服务器的IP地址都是github的。</p>
<p>如果不太相信，也可以用cmd的ping命令来ping一下自己的仓库，IPv4地址肯定是上面四个中的一个（除非github换服务器了）</p>
<p>如果是以<code>:</code>连接的IP地址，是IPv6地址，可以在结尾加<code>-4</code>强行获得IPv4地址。</p>
<p><code>ping example.github.io -4</code></p>
<p>那么这时候似乎就产生了一个bug：如果我们绑定了github的IP，以后域名的解析就都会解析到github的首页。</p>
<p>所以github的设计者们就想出了这样一个办法：（<a href="http://www.example.com/">www.example.com</a> 为示范域名，而example.github.io为仓库）</p>
<ul>
<li>DNS服务器解析<a href="http://www.example.com/">www.example.com</a> 后，返回github服务器的IP。</li>
<li>客户端访问IP，并传递域名参数 <a href="http://www.example.com/">www.example.com</a> 。</li>
<li>github服务器处理请求，<strong>并且根据域名参数寻找对应的库</strong>。</li>
<li>将仓库的页面返回给客户端，完成请求。</li>
</ul>
<p>所以关键之处就在于给仓库添加一个域名参数。</p>
<h1 id="添加域名参数"><a href="#添加域名参数" class="headerlink" title="添加域名参数"></a>添加域名参数</h1><p>可以在guihub上面手动添加我们的域名参数，但这个方法不够安全稳定，而且难以修改。</p>
<p>因此建议在本地文件中的source文件夹中新建一个文本文档，里面写上自己购买的域名。（有无www都可以）。</p>
<img src="/202309296d16578d/image-20230929113508057.png" class>

<img src="/202309296d16578d/image-20230929113552785.png" class title="image-20230929113552785">

<p>然后将此文件保存并删除txt后缀。</p>
<p>一定要将其重命名为<code>CNAME</code>，等待下一次部署便可自动修改。</p>
<blockquote>
<p>注意：文件中如果加入WWW，则最后在地址栏显示的是<a href="http://www.example.com/">www.example.com</a> ,即使用户输入了example.com，反之亦然。</p>
</blockquote>
<p>至此，git仓库的名称已经换成了你的域名，即使输入example.github.io也会重定向到你的域名。</p>
<h1 id="可能有坑"><a href="#可能有坑" class="headerlink" title="可能有坑"></a>可能有坑</h1><h2 id="绑定性"><a href="#绑定性" class="headerlink" title="绑定性"></a>绑定性</h2><blockquote>
<p>……即使输入example.github.io也会重定向到你的域名。</p>
</blockquote>
<p>这就意味着域名如果无法解析，io也无法访问。</p>
<p>所以一定要保证域名能够正常使用。</p>
<h2 id="认证性"><a href="#认证性" class="headerlink" title="认证性"></a>认证性</h2><p>如果不实名认证，域名将会被停止解析，因而出现<strong>没有找到DNS</strong>的报错提示。</p>
<img src="/202309296d16578d/8b4219fce9254e93ba4003ef51ced9f9.png" class>

<img src="/202309296d16578d/b7b8dbc26f7f67387b96ecab57c7c959.png" class title="b7b8dbc26f7f67387b96ecab57c7c959">

<h2 id="劫持"><a href="#劫持" class="headerlink" title="劫持"></a>劫持</h2><p>在购买域名时，如果没有购买专门的DNS解析服务，那么使用的是公共的DNS服务器。</p>
<p>这样可能会被劫持，造成跳转错误。</p>
<p>具体可以搜索：<code>DNS劫持与污染</code></p>
<h2 id="WWW问题"><a href="#WWW问题" class="headerlink" title="WWW问题"></a>WWW问题</h2><p>如果加上或删去www后，发现DNS解析错误，可能是只添加了一部分的解析，请在控制台添加完整解析即可。</p>
<p>参见本章「解析域名」一节。</p>
<p>详细原因分析在<a href="http://www.windeling.com.cn/20230929e2706666/">关于网络www前缀对DNS解析影响的分析 | Windeling</a></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>到此，已经建立了一个仓库，并且能够与之通信。</p>
<p>接下来，就要开始装饰仓库了！！</p>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础搭建个人博客（贰）</title>
    <url>/202309295207cddc/</url>
    <content><![CDATA[<h1 id="Git工具的安装与连接"><a href="#Git工具的安装与连接" class="headerlink" title="Git工具的安装与连接"></a>Git工具的安装与连接</h1><p>由于没有购买自己的服务器，所以编写的代码和网站是寄托在全球最大开源代码托管平台——Github上。</p>
<p>每次写完文章以后，需要每次都在Github的仓库里面用手动方式提交。</p>
<p>这个方法需要打开网站，并且还要仔细区分哪些是新文件，非常麻烦与繁琐。</p>
<p>为了简化这一提交过程，需要下载Git工具。</p>
<span id="more"></span>

<h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目，说简单点就是可以在各地控制同一项目，在这里就起到上传文件到云端（Github）的作用。</p>
<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>第一件事当然就是打开官网：<a href="https://git-scm.com/downloads" title="git官网">Git官网</a></p>
<p>选择操作系统下载即可。</p>
<p>这里以Windows 10为例。</p>
<p>直接点64-bit Git for Windows Setup.</p>
<p><img src="https://img1.imgtp.com/2023/09/30/lmnKVwCx.png" alt="选择Setup就好啦" title="选择Setup就好啦"></p>
<p>随后就是一个正常安装程序的流程。</p>
<p>只需要注意一点。</p>
<img src="/202309295207cddc/v2-3dcca92f4b2ab2a909e773c75d55bb9e_720w.webp" class>

<p>不过没有什么用处……</p>
<h2 id="成功标志"><a href="#成功标志" class="headerlink" title="成功标志"></a>成功标志</h2><img src="/202309295207cddc/image-20230930101825412.png" class title="image-20230930101825412">

<p>只要能在任何一个文件夹内右键弹出这样的菜单，并且包含两个很明显的git命令，说明你已经成功了。</p>
<img src="/202309295207cddc/image-20230930102006004.png" class title="image-20230930102006004">

<p>选择<code>Open Git Bash here</code>，启动上述命令提示界面。</p>
<p>输入git验证是否安装成功。</p>
<img src="/202309295207cddc/image-20230930102135560.png" class title="image-20230930102135560">

<p>若出现以下界面就代表安装成功。</p>
<img src="/202309295207cddc/image-20230930102219584.png" class title="image-20230930102219584">

<h1 id="与Github建立联系"><a href="#与Github建立联系" class="headerlink" title="与Github建立联系"></a>与Github建立联系</h1><p>有了联系的工具，还要与自己的Github账号建立联系，才能向自己的账号内提交文件。</p>
<p>建立联系便需要有认证密钥，这样才能认证是否为合法的提交者。</p>
<h2 id="SSH简介"><a href="#SSH简介" class="headerlink" title="SSH简介"></a>SSH简介</h2><p>SSH（安全外壳协议，Secure Shell 的缩写）是建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议，利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。简单来说，SSH就是保障你的账户安全，将你的数据加密压缩，不仅防止其他人截获你的数据，还能加快传输速度。如果想详细了解的话，可以看这篇文章：<a href="https://link.zhihu.com/?target=https://blog.csdn.net/qq_35246620/article/details/54317740">详述 SSH 的原理及其应用 - CSDN</a>，下面就详细介绍如何绑定GitHub和提交文件。</p>
<h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><h3 id="验证SSH"><a href="#验证SSH" class="headerlink" title="验证SSH"></a>验证SSH</h3><p>要用git上传文件到GitHub首先得利用SSH登录远程主机，而登录方式有两种：一种是口令登录；另一种是公钥登录。</p>
<p>口令登录每次都要输入密码十分麻烦，而公钥登录就省去了输入密码的步骤，所以选择公钥授权。</p>
<p>首先得在 GitHub 上添加 SSH key 配置，要想生成SSH key，就要先可以安装 SSH，不过安装了 Git Bash，其应该自带了 SSH。检验一下是否安装 SSH，在新建的文件夹中右键打开 Git Bash：</p>
<img src="/202309295207cddc/image-20230930103527848.png" class title="image-20230930103527848">

<p>如上图所示，即已安装 SSH。</p>
<h3 id="生成SSH"><a href="#生成SSH" class="headerlink" title="生成SSH"></a>生成SSH</h3><p>然后，输入 <code>ssh-keygen -t rsa </code>命令，表示指定 RSA 算法生成密钥，然后敲四次回车键。（反正是英文也看不懂）</p>
<p>之后就就会生成两个文件，分别为密钥 id_rsa 和公钥 id_rsa.pub.。</p>
<p>文件的位置在 Git Bash 上面都有显示，默认生成在以下目录：</p>
<ul>
<li>Linux 系统：~&#x2F;.ssh</li>
<li>Mac 系统：~&#x2F;.ssh</li>
<li>Windows 10 ：C:&#x2F;Users&#x2F;用户名&#x2F;.ssh</li>
</ul>
<p>接下来要做的事情就是把公钥 id_rsa.pub 的内容添加到 GitHub。复制公钥 id_rsa.pub 文件里的内容，可以通过目录找到 id_rsa.pub 文件的位置，用记事本打开文件复制。</p>
<p>如果你实在找不到文件也没有关系，按照以下步骤直接在 Git Bash 上打开就行：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$ cd ~/.ssh </span><br><span class="line">$ ls</span><br><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和Shift+insert.</p>
</blockquote>
<p>会出现一段长长的密钥，然后将它复制下来。</p>
<h3 id="向Github添加密钥"><a href="#向Github添加密钥" class="headerlink" title="向Github添加密钥"></a>向Github添加密钥</h3><p>打开Github网站：<a href="https://github.com/">GitHub</a></p>
<img src="/202309295207cddc/image-20230930104203340.png" class title="image-20230930104203340">

<p>点击右上角的个人中心：</p>
<img src="/202309295207cddc/image-20230930104223300.png" class title="image-20230930104223300">

<p>点击<code>Settings</code></p>
<img src="/202309295207cddc/image-20230930104311944.png" class title="image-20230930104311944">

<p>选择左侧的<code>SSH and GPG keys</code></p>
<img src="/202309295207cddc/image-20230930104436667.png" class title="image-20230930104436667">

<p>选择<code>New SSH Key</code>，添加新的SSH。</p>
<blockquote>
<p>由于这是总结教程，此处已有一个SSH，忽略即可。</p>
</blockquote>
<img src="/202309295207cddc/image-20230930104555994.png" class title="image-20230930104555994">

<p>随便起一个title，然后将SSH密钥复制进<code>Key</code>中。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证是否成功，我们可以通过在 Git Bash 中输入 <code>ssh -T git@github.com</code> 进行检验：</p>
<p><img src="https://pic3.zhimg.com/80/v2-5b4f05ea2e2a7fb8b13fd35a9bafa8ce_720w.webp" alt="img"></p>
<p>第一次会出现这种情况，填 yes 就行，若出现下图中的情况，则表明绑定成功：</p>
<p><img src="https://pic4.zhimg.com/80/v2-3915b3e46e40010d3d911f84d4e8b0ff_720w.webp" alt="img"></p>
<h1 id="上传文件方法"><a href="#上传文件方法" class="headerlink" title="上传文件方法"></a>上传文件方法</h1><p>提交文件有两种方法：</p>
<h3 id="第一种：本地没有-git-仓库"><a href="#第一种：本地没有-git-仓库" class="headerlink" title="第一种：本地没有 git 仓库"></a>第一种：本地没有 git 仓库</h3><ol>
<li>直接将远程仓库 clone 到本地；</li>
<li>将文件添加并 commit 到本地仓库；</li>
<li>将本地仓库的内容push到远程仓库。</li>
</ol>
<h3 id="第二种：本地有-Git-仓库，并且我们已经进行了多次-commit-操作"><a href="#第二种：本地有-Git-仓库，并且我们已经进行了多次-commit-操作" class="headerlink" title="第二种：本地有 Git 仓库，并且我们已经进行了多次 commit 操作"></a>第二种：本地有 Git 仓库，并且我们已经进行了多次 commit 操作</h3><ol>
<li>建立一个本地仓库进入，init 初始化；</li>
<li>关联远程仓库；</li>
<li>同步远程仓库和本地仓库；</li>
<li>将文件添加提交到本地仓库；</li>
<li>将本地仓库的内容 push 到远程仓库。</li>
</ol>
<p>较为推荐使用第一种，步骤较为简便。</p>
<h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><blockquote>
<p>在开始之前，先声明一下。这里用到的仓库是作为检验是否已经建立连接而创建的验证仓库，后面会新建立一个真正作为博客代码存放区域的仓库。</p>
<p>为了避免和以后的仓库起冲突，此仓库请<strong>不要</strong>命名为用户名.github.io。</p>
</blockquote>
<blockquote>
<p>这一部分是为了<strong>让新手熟悉如何与建仓库建立连接，并且推送到远端的程序</strong>，对仓库使用方法娴熟者可以跳过。</p>
</blockquote>
<blockquote>
<p>这部分主要是通过一个试验的仓库来<strong>模拟提交博客中可能遇到的各种情况以及操作流程</strong>。</p>
</blockquote>
<p>首先建立一个试验仓库，名字可以随意命名。</p>
<p>要克隆仓库，首先要知道仓库的网络位置。</p>
<p>由于仓库的设计有所改动，所以介绍两种情况。</p>
<h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p><img src="/202309295207cddc/Users/winde/AppData/Roaming/Typora/typora-user-images/image-20230930111610185.png" alt="image-20230930111610185"></p>
<p>如图，可以看到有一个绿色的按钮<code>code</code>，只将鼠标放在上面可以看到：</p>
<img src="/202309295207cddc/image-20230930111904632.png" class title="image-20230930111904632">

<p>仓库的网络地址便是给出的这一行URL，点击右边按钮复制即可。</p>
<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><img src="/202309295207cddc/image-20230930112100221.png" class title="image-20230930112100221">

<p>对于一个新建的空仓库，Github很贴心的设置了一个快速设置的界面，直接将仓库的网络地址展现出来。</p>
<p>但有一些没有接触过Github的人找不到绿色的code按钮就会慌张。</p>
<p>在这里直接将中间的<code>Quick setup</code>里面的URL复制便可。</p>
<hr>
<p>至此，你已经获得了这个试验仓库的URL地址。</p>
<blockquote>
<p>在正式建立博客时，这部分就相当于建立博客仓库。</p>
</blockquote>
<h2 id="本地克隆"><a href="#本地克隆" class="headerlink" title="本地克隆"></a>本地克隆</h2><p>接下来在本地的硬盘中运行git程序。</p>
<blockquote>
<p>此步骤是为了模拟以后向远端推送的过程。</p>
</blockquote>
<p>输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone 刚刚的URL</span><br></pre></td></tr></table></figure>

<img src="/202309295207cddc/image-20230930112723806.png" class title="image-20230930112723806">

<img src="/202309295207cddc/image-20230930112753486.png" class title="image-20230930112753486">

<p>便发现多出来一个文件夹，名字是你仓库的名字。</p>
<p>在其中随便创建一个文件，测试能否部署到远端。</p>
<img src="/202309295207cddc/image-20230930112941791.png" class title="image-20230930112941791">

<p>有些人可能看不到这个.git文件夹，是因为这个文件夹默认是隐藏的，不过这个文件夹不影响操作。</p>
<p>在<strong>此目录</strong>下运行git程序，输入 <code>git status </code>命令查看仓库状态：</p>
<blockquote>
<p>注意：git程序推送到远端时默认是以运行时的路径作为根路径，所以无论是此时还是以后部署博客时，均需要在博客文件夹根目录下进行部署操作。</p>
</blockquote>
<img src="/202309295207cddc/image-20230930113610620.png" class title="image-20230930113610620">

<p>程序告诉我们此时已经有新文件，但是还没有被推送。</p>
<p>所以现在要使用<code>git add 文件名</code>命令将文件添加到临时缓冲区，再用<code>git commit -m &quot;辅助信息&quot;</code>命令将其提交到本地仓库。</p>
<blockquote>
<p>这里的辅助信息是用来说明这个文件的，并没有具体的作用，所以也可以直接输入<code>git commit</code>。</p>
</blockquote>
<p>如果你是第一次提交的话，就会出现下图的情况，会让你输入用户名和邮箱：</p>
<img src="/202309295207cddc/image-20230930114345758.png" class title="image-20230930114345758">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git config --global user.name<span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">git config --global user.email<span class="string">&quot;你的github注册的电子邮件&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果不放心可以输入<code>git log</code>查看仓库提交日志，再次输入<code>git status</code>查看仓库状态。</p>
<blockquote>
<p>在正式建立博客时，这一部分就相当于在部署博客。</p>
</blockquote>
<h2 id="提交中的改变"><a href="#提交中的改变" class="headerlink" title="提交中的改变"></a>提交中的改变</h2><p>由于github做了系统更新，所以在这一步很多网上的教程都过于古老，不能使用。</p>
<p>许多教程会让我们输入<code>git push origin master</code>命令来进行推送。</p>
<p>然而，由于Github在仓库总分支已经由master改为mian了，所以我们要将上述代码中的master也同样更换。</p>
<p>应输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在这当中，origin是远程仓库的别名，可任意更换。但这个词本身就能代表远程仓库，最好保留。</p>
</blockquote>
<p>由于Github与我们的连接速度较慢，所以会光标不断闪烁，请耐心等待。</p>
<blockquote>
<p>在正式建立博客时，这一部分就相当于模拟部署时的等待。</p>
</blockquote>
<img src="/202309295207cddc/image-20230930115238127.png" class title="image-20230930115238127">

<p>有可能出现连接失败的情况，这是正常现象，在以后正式部署时也会多次遇到。</p>
<img src="/202309295207cddc/image-20230930115710526.png" class title="image-20230930115710526">

<blockquote>
<p>此图便是正式部署时连接失败的报错信息。</p>
</blockquote>
<blockquote>
<p>这种无法连接属于网络问题，可以通过多次尝试或者使用代理的方法来解决。</p>
</blockquote>
<p>连接成功后将会跳出一个窗口，需要我们输入用户名和密码验证账户。</p>
<p>验证成功后将会开始部署，将文件推送到远端。</p>
<img src="/202309295207cddc/image-20230930120052193.png" class title="image-20230930120052193">

<blockquote>
<p>在这一部分中，通过建立一个模拟仓库并推送文件来模拟了正式部署博客时的大致流程以及可能遇到的问题。</p>
<p>在正式部署博客中，将会由hexo框架为我们推送文件。</p>
</blockquote>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>接下来就需要决定是否购买域名，为自己的博客设定不一样的标志。</p>
<p>➢<a href="http://www.windeling.com.cn/202309296d16578d/">零基础搭建个人博客（叁） | Windeling</a></p>
<p>如果决定不购买域名，使用默认的「域名」example.github.io，请跳转到第四章。</p>
<p>➢<a href="https://boredliam.github.io/2023/09/30/Blog_series/blog-04/">零基础搭建个人博客（肆） | Liam’s boring life</a></p>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础搭建个人博客（零）</title>
    <url>/20230929ffa1f970/</url>
    <content><![CDATA[<p>在信息技术日益发展的今天，搭建一个属于自己的，独一无二的，自由设计的个人博客网站已经不再遥远，就算是毫无HTML，CSS，JavaScript基础的小白同样也能搭建成功。</p>
<p>搭建个人博客最重要的不是编程基础，而是<strong>耐心与坚持</strong>。</p>
<p>在搭建本博客的过程中，参照的以往的教程都有些老旧，甚至还有一些奇怪的坑容易陷入。</p>
<p><a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客（超详细） - 知乎 (zhihu.com)</a></p>
<p>这一篇教程是搭建个人网站的核心，但由于年代过于久远，UI设计，代码顺序均有变动。</p>
<p>为此我们决定重新写一篇教程，总结并填补各种教程的坑。</p>
<span id="more"></span>

<h1 id="总体技术原理"><a href="#总体技术原理" class="headerlink" title="总体技术原理"></a>总体技术原理</h1><p>通过Github Page页面的更改方式，将基于Node.js生成的js文件通过git工具部署到对应的仓库，并由hexo驱动，使用户访问该仓库时展示页面，达到个人博客的效果。</p>
<h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><p>搭建个人博客推荐在Windows环境和Linux环境下搭建。</p>
<p>需要安装的软件包括：</p>
<ul>
<li>git</li>
<li>Node.js</li>
<li>hexo</li>
</ul>
<h1 id="总体目录"><a href="#总体目录" class="headerlink" title="总体目录"></a>总体目录</h1><ol>
<li><p>注册Github  <a href="https://boredliam.github.io/2023/09/29/Blog_series/blog-01/">零基础搭建个人博客（壹） | Liam’s boring life </a></p>
</li>
<li><p>安装git工具并与Github建立连接 <a href="http://www.windeling.com.cn/202309305207cddc/">零基础搭建个人博客（贰） | Windeling</a></p>
</li>
<li><p>域名的购买与解析 <a href="http://www.windeling.com.cn/202309296d16578d/">零基础搭建个人博客（叁） | Windeling</a></p>
</li>
<li><p>安装node.js和hexo <a href="https://boredliam.github.io/2023/09/30/Blog_series/blog-04/">零基础搭建个人博客（肆） | Liam’s boring life</a></p>
</li>
<li><p>设置个人主题 <a href="http://www.windeling.com.cn/2023093017f4661a/">零基础搭建个人博客（伍） | Windeling</a></p>
</li>
<li><p>发布文章</p>
</li>
<li><p>优化主题功能</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>关于网络www前缀对DNS解析影响的分析</title>
    <url>/20230929e2706666/</url>
    <content><![CDATA[<p>在购买了这个网站的域名windeling.com.cn后，发现加上了WWW便会无法访问。</p>
<p>那么，造成这个问题的原因是什么？为什么许多网站无论是否添加WWW，都是可以访问的？</p>
<span id="more"></span>

<h1 id="WWW简介"><a href="#WWW简介" class="headerlink" title="WWW简介"></a>WWW简介</h1><blockquote>
<p>www是World Wide Web的缩写。</p>
<p>www WWW (<strong>World Wide Web</strong>，万维网)是存储在 Internet 计算机 中、数量巨大的 文档 的集合。. 这些文档称为 页面 ，它是一种 超文本 ( Hypertext )信息，可以用于描述 超媒体 。. 文本 、 图形 、 视频 、 音频 等 多媒体 ，称为超媒体 ( Hypermedia )。. Web上的信息是由彼此关联的文档组成的，而使其连接在一起的是 超链接 ( Hyperlink) [2] 。</p>
</blockquote>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这里使用两个具体的网站进行分析。</p>
<ul>
<li>Github网站，全球最大的代码托管平台。</li>
<li>bilibili网站，中国境内著名视频网站。</li>
</ul>
<p>在浏览器输入这两个网站的域名时，会发现一些细微的区别。</p>
<p>如果在在输入哔哩哔哩网站时不加入www,同样在最终的地址栏结果中照样会出现<a href="http://www.bilibili.com./">www.bilibili.com。</a></p>
<p>但是在输入github的网址时，即使是加了www，最后也将会将www省去。</p>
<p>但是最终我们都能跳转到正确的页面，这是为什么呢？</p>
<h1 id="IP映射"><a href="#IP映射" class="headerlink" title="IP映射"></a>IP映射</h1><blockquote>
<p>DNS（Domain Name System，域名系统），因特网上作为域名和IP地址互相映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机对应的IP地址的过程叫做域名解析（或主机名解析）。DNS协议运行在UDP协议之上，使用端口号53。</p>
<p>DNS的分布数据库是以域名为索引的，每个域名实际上就是一棵很大的逆向树中路径，这棵逆向树称为域名空间（domain name space），如下图所示树的最大深度不得超过127层，树中每个节点都有一个可以长达63个字符的文本标号。</p>
</blockquote>
<blockquote>
<ul>
<li><strong>DNS域名解析过程</strong></li>
</ul>
<p>1，在浏览器中输入<a href="https://link.zhihu.com/?target=http://pool.btc.com">http://pool.btc.com</a>域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</p>
<p>2，如果hosts里没有这个域名的映射，则查找<strong>本地DNS解析器缓存</strong>，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</p>
<p>3，如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP&#x2F;ip参数中设置的首选DNS服务器，在此我们叫它<strong>本地DNS服务器</strong>，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</p>
<p>4，如果要查询的域名，不在本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</p>
<p>5，如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(<a href="https://link.zhihu.com/?target=http://BTC.com">http://BTC.com</a>)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找<a href="https://link.zhihu.com/?target=http://pool.btc.com">http://pool.btc.com</a>域服务器，重复上面的动作，进行查询，直至找到<a href="https://link.zhihu.com/?target=http://pool.btc.com">http://pool.btc.com</a>主机。</p>
<p>6，如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</p>
</blockquote>
<p>我们分析一下域名转换为IP的过程，就会发现是DNS服务器在这中起到了至关重要的作用。</p>
<p>所以如果我们能将多个网址匹配到同样一个IP，也可以实现同样的效果。</p>
<p>通过重定向的操作手段，在输入不一样的网址时发送301代码，使之重定向到新的网站。</p>
<p>所以最后的网站结果取决于开发者的设置。</p>
]]></content>
      <tags>
        <tag>域名</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>关于洛雪音乐下载高品质文件的处理方法</title>
    <url>/20230929feb6928c/</url>
    <content><![CDATA[<p>如今听音乐需要开通各大音乐平台的会员才能畅享音乐之美，因此有很多大佬就在github开发了洛雪音乐这一开源代码项目。</p>
<p>由于版权限制，洛雪音乐默认只有128k品质的音乐，这对一些对音乐有较高品质追求的用户带来了不便。</p>
<span id="more"></span>

<h1 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h1><p>既然有问题，必然会有解决问题的人。</p>
<p>有大佬便编写了一个js文件，可以获得更高品质的音乐。</p>
<img src="/20230929feb6928c/image-20230929120413850.png" class title="image-20230929120413850">

<p>可以看出，洛雪音乐的作者为我们提供了音乐来源的选择，选择自定义源管理，便可以导入js脚本文件。</p>
<p>这里的「六音音源」便是可以下载高品质音乐的js文件。</p>
<h3 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h3><p>目前有两个流行版本，分别是1.0.6和1.0.7，区别主要在于1.0.7每秒不得超过5次请求，这就对机器操作造成了一定的限制。</p>
<img src="/20230929feb6928c/image-20230929120815688.png" class title="image-20230929120815688">

<p>可以看到，现在支持了320k音质和1000k的FLAC无损音质。经过测试，音质的确有改变。</p>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="http://dl.sixyin.com/d/23338253-46422269-262911">城通网盘 (sixyin.com)</a> 密码：<a href="https://www.sixyin.com/download?post=8498&time=1695960829#">6yit</a></p>
<p><a href="https://soso.lanzouj.com/b00p9c94f#8mno">六音音源 (lanzouj.com)</a> 云盘密码：<a href="https://www.sixyin.com/download?post=8498&time=1695960829#">8mno</a></p>
<p>可直接点击密码进入。</p>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>下载完js脚本文件后，只需要在自定义音源中导入js文件即可。</p>
]]></content>
      <tags>
        <tag>洛雪音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>关于github个人网站绑定域名的原理分析和操作</title>
    <url>/2023092958a4be22/</url>
    <content><![CDATA[<p>在建立个人网站以后，由于这种博客的服务器是建立在github的，通过修改github的page页来实现个人网站的效果。</p>
<p>所以我们的网站域名其实是对一个github仓库的访问，访问后便展示这个仓库的page页。</p>
<p>所以所谓的「域名」xxxx.github.io，其实是对一个github仓库的访问。所谓的域名其实是仓库名字。</p>
<p>如果输入时在前面加上www，会显示404页面，表示找不到这个仓库。</p>
<p>而且github.io的后缀也非常冗长，不利于显示出网站的风格。</p>
<p>那么有什么办法可以转换域名呢？办法就是更改DNS解析。</p>
<span id="more"></span>

<h1 id="DNS简介"><a href="#DNS简介" class="headerlink" title="DNS简介"></a>DNS简介</h1><blockquote>
<p>DNS（Domain Name System，域名系统），因特网上作为域名和IP地址互相映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机对应的IP地址的过程叫做域名解析（或主机名解析）。DNS协议运行在UDP协议之上，使用端口号53。</p>
<p>DNS的分布数据库是以域名为索引的，每个域名实际上就是一棵很大的逆向树中路径，这棵逆向树称为域名空间（domain name space），如下图所示树的最大深度不得超过127层，树中每个节点都有一个可以长达63个字符的文本标号。</p>
</blockquote>
<blockquote>
<ul>
<li><strong>DNS域名解析过程</strong></li>
</ul>
<p>1，在浏览器中输入<a href="https://link.zhihu.com/?target=http://pool.btc.com">http://pool.btc.com</a>域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</p>
<p>2，如果hosts里没有这个域名的映射，则查找<strong>本地DNS解析器缓存</strong>，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</p>
<p>3，如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP&#x2F;ip参数中设置的首选DNS服务器，在此我们叫它<strong>本地DNS服务器</strong>，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</p>
<p>4，如果要查询的域名，不在本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</p>
<p>5，如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(<a href="https://link.zhihu.com/?target=http://BTC.com">http://BTC.com</a>)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找<a href="https://link.zhihu.com/?target=http://pool.btc.com">http://pool.btc.com</a>域服务器，重复上面的动作，进行查询，直至找到<a href="https://link.zhihu.com/?target=http://pool.btc.com">http://pool.btc.com</a>主机。</p>
<p>6，如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</p>
</blockquote>
<p>从上面的介绍中我们呢可以看到，DNS解析的本质其实是将域名和IP地址联系起来，将一个输入的域名转换为网络能理解的IP地址。</p>
<p>对与普通的服务器，只要将域名和服务器的IP地址绑定起来，就可以完成这一映射关系。</p>
<p>但是这个转换工作是谁进行的呢？这个交换服务就要依靠DNS服务器了。</p>
<h1 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h1><p>DNS服务器更像一个庞大的数据库，通过建立类似于python字典一样的关系，那么就可以从数据库中提取出所需的信息。</p>
<p>如果在一个DNS服务器上找不到需的信息，就会向它的上级服务器发送请求，直到获得答复或者顶级服务器无应答。</p>
<p>但是要怎么样才能往一个DNS服务器添加网站信息呢？要按照情况分类讨论。</p>
<h2 id="顶级DNS服务器"><a href="#顶级DNS服务器" class="headerlink" title="顶级DNS服务器"></a>顶级DNS服务器</h2><p>这种服务器是最高的级别，理论上中国的三大运营商的自动分配的服务器也都可以解析。</p>
<p>想要向这个服务器添加IP信息，这时候就要执行「购买域名」的操作了。</p>
<p>购买域名后，DNS服务器就可以进行转换操作，在正规大平台的服务器往往能覆盖更广的范围，成为更多服务器的上级服务器。</p>
<h2 id="普通DNS服务器"><a href="#普通DNS服务器" class="headerlink" title="普通DNS服务器"></a>普通DNS服务器</h2><p>如果在普通DNS服务器上添加，就有可能无法解析。</p>
<p>举一个较为极端的例子，向自己搭建的DNS服务器添加IP信息，运营商不会指定这一个DNS服务器作为其他用户的DNS服务器，</p>
<p>所以尽量在更高级的DNS服务器里添加自己网站的IP信息。</p>
<h1 id="GIthub页面的特殊性"><a href="#GIthub页面的特殊性" class="headerlink" title="GIthub页面的特殊性"></a>GIthub页面的特殊性</h1><p>以上是普通网站的页面处理方法，但是github的页面具有一定的特殊性。</p>
<p>如这两个网站：</p>
<img src="/2023092958a4be22/image-20230929112957898.png" alt="image-20230929112957898">

<img src="/2023092958a4be22/image-20230929112950553.png" class>

<p>在使用ping命令测试的时候，我们发现这两个网站的IP地址是相同的。</p>
<p>原因在于这两个所谓的「网站」其实都是github服务器上的一个仓库，服务器的IP地址都是github的。</p>
<p>那么这时候似乎就产生了一个bug：如果我们绑定了github的IP，以后域名的解析就都会解析到github的首页。</p>
<p>所以github的设计者们就想出了这样一个办法：（<a href="http://www.example.com/">www.example.com</a> 为示范域名，而example.github.io为仓库）</p>
<ul>
<li>DNS服务器解析<a href="http://www.example.com后,返回github服务器的ip./">www.example.com后，返回github服务器的IP。</a></li>
<li>客户端访问IP，并传递域名参数<a href="http://www.example.com./">www.example.com。</a></li>
<li>github服务器处理请求，<strong>并且根据域名参数寻找对应的库</strong>。</li>
<li>将仓库的页面返回给客户端，完成请求。</li>
</ul>
<p>所以关键之处就在于给仓库添加一个域名参数。</p>
<h1 id="添加域名参数"><a href="#添加域名参数" class="headerlink" title="添加域名参数"></a>添加域名参数</h1><p>可以在guihub上面手动添加我们的域名参数，但这个方法不够安全稳定，而且难以修改。</p>
<p>因此建议在本地文件中的source文件夹中新建一个文本文档，里面写上自己购买的域名。（有无www都可以）对啊好</p>
<img src="/2023092958a4be22/image-20230929113508057.png" class>

<img src="/2023092958a4be22/image-20230929113552785.png" class title="image-20230929113552785">

<p>然后将此文件保存并删除txt后缀。</p>
<p>将其重命名为<code>CNAME</code>，等待下一次部署便可自动修改。</p>
<h1 id="解析IP"><a href="#解析IP" class="headerlink" title="解析IP"></a>解析IP</h1><p>在这里就要注意到一点：github的IPv4地址共有四个，还有一些IPv6地址，所以建议添加以下IP：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A @ 185.199.108.153</span><br><span class="line">A @ 185.199.109.153</span><br><span class="line">A @ 185.199.110.153</span><br><span class="line">A @ 185.199.111.153</span><br><span class="line">A WWW 185.199.108.153</span><br><span class="line">A WWW 185.199.109.153</span><br><span class="line">A WWW 185.199.110.153</span><br><span class="line">A WWW 185.199.111.153</span><br></pre></td></tr></table></figure>
<p>A代表是IPv4地址，@代表不加www的域名，如example.com，www代表域名的全称，如<a href="http://www.example.com/">www.example.com</a></p>
<p>这样无论访问者加不加WWW，都可以解析到正确的IP。</p>
<p>这四个IP地址是Github的常用IP，最好全部添加，万一Github换用服务器（经常性行为），就会导致无法访问。</p>
]]></content>
      <tags>
        <tag>github</tag>
        <tag>域名</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>关于手表ADB调试的应用分析与教程</title>
    <url>/2023092317374/</url>
    <content><![CDATA[<p>今天发现OPPO的手表能够打开开发者选项并进入USB调试。</p>
<p>因此就有可能通过ADB命令行使手表可以下载自己想要的应用。</p>
<p>那么就以OPPO Watch 3为例，进行应用调试的分析。</p>
<span id="more"></span>

<h1 id="开发者模式"><a href="#开发者模式" class="headerlink" title="开发者模式"></a>开发者模式</h1><p>众所周知，ADB调试功能是给程序开发者使用一种功能，其目的在于可以通过更高端的电子设备来对这种智能设备进行并且代码与调试。</p>
<p>所以我们想要使用ADB调试功能，就必须要在手表端打开调试界面并允许调试。</p>
<p>但是ADB调试是针对安卓系统而言的，所以非安卓系统的手表不能使用此功能调试。</p>
<h2 id="支持的系列"><a href="#支持的系列" class="headerlink" title="支持的系列"></a>支持的系列</h2><p>目前已知支持的系列有OPPO手表全系，以及部分小米手环，还有ticwatch的手表系列，华为的watch系列。</p>
<p><a href="https://help.wearosbox.com/connect/devices.html">手表列表 | WearOS 工具箱 (wearosbox.com)</a></p>
<h2 id="不支持的手表"><a href="#不支持的手表" class="headerlink" title="不支持的手表"></a>不支持的手表</h2><p>有很多手表使用了 RTOS 或者轻量级私有化系统，而不是Android。因此无法连接到这些手表。以下是一些常见的不支持的手表：</p>
<ul>
<li>华为 Watch GT 以及各类产品。<br>仅 HUAWEI Watch 系列手表支持。</li>
<li>三星 Gear &#x2F; Active 系列。<br>三星 Gear S3 可能可以通过刷入 Wear OS 固件来支持。但由于用户较少，并且需要刷入第三方固件，因此不推荐这样做。</li>
<li>除小米手表 1 之外的所有小米生产线设备以及上述华米设备。其余如 Color, 小米手表 S1, 华米, Redmi, Amazfit 等品牌均不支持。</li>
</ul>
<h1 id="ADB调试"><a href="#ADB调试" class="headerlink" title="ADB调试"></a>ADB调试</h1><p>工欲善其事，必先利其器，在开始操作之前，先简单了解一下关于adb调试的理论原理及应用基础。</p>
<blockquote>
<h1 id="Android-调试桥-adb"><a href="#Android-调试桥-adb" class="headerlink" title="Android 调试桥 (adb)"></a>Android 调试桥 (adb)</h1><p>Android 调试桥 (<code>adb</code>) 是一种功能多样的命令行工具，可让您与设备进行通信。<code>adb</code> 命令可用于执行各种设备操作，例如安装和调试应用。<code>adb</code> 提供对 Unix shell（可用来在设备上运行各种命令）的访问权限。它是一种客户端-服务器程序，包括以下三个组件：</p>
<ul>
<li><strong>客户端</strong>：用于发送命令。客户端在开发机器上运行。您可以通过发出 <code>adb</code> 命令从命令行终端调用客户端。</li>
<li>**守护程序 (adbd)**：用于在设备上运行命令。守护程序在每个设备上作为后台进程运行。</li>
<li><strong>服务器</strong>：用于管理客户端与守护程序之间的通信。服务器在开发机器上作为后台进程运行。</li>
</ul>
</blockquote>
<p>这是安卓官方对于ADB的解释与说明。</p>
<blockquote>
<h2 id="adb-的工作原理"><a href="#adb-的工作原理" class="headerlink" title="adb 的工作原理"></a>adb 的工作原理</h2><p>当您启动某个 <code>adb</code> 客户端时，该客户端会先检查是否有 <code>adb</code> 服务器进程已在运行。如果没有，它会启动服务器进程。服务器在启动后会与本地 TCP 端口 5037 绑定，并监听 <code>adb</code> 客户端发出的命令。</p>
<p><strong>注意</strong>：所有 <code>adb</code> 客户端均使用端口 5037 与 <code>adb</code> 服务器通信。</p>
<p>然后，服务器会与所有正在运行的设备建立连接。它通过扫描 5555 到 5585 之间（该范围供前 16 个模拟器使用）的奇数号端口查找模拟器。服务器一旦发现 <code>adb</code> 守护程序 (adbd)，便会与相应的端口建立连接。</p>
</blockquote>
<blockquote>
<h2 id="在设备上启用-adb-调试"><a href="#在设备上启用-adb-调试" class="headerlink" title="在设备上启用 adb 调试"></a>在设备上启用 adb 调试</h2><p>如要在通过 USB 连接的设备上使用 adb，您必须在设备的系统设置中启用 <strong>USB 调试</strong>（位于<strong>开发者选项</strong>下）。在 Android 4.2（API 级别 17）及更高版本中，<strong>开发者选项</strong>屏幕默认处于隐藏状态。如需将其显示出来，请<a href="https://developer.android.google.cn/studio/debug/dev-options?hl=zh-cn#enable">启用开发者选项</a>。</p>
<p>现在，您已经可以通过 USB 连接设备了。您可以通过从 <code>android_sdk/platform-tools/</code> 目录执行 <code>adb devices</code> 来验证设备是否已连接。如果已连接，您将看到设备名称以“设备”形式列出。</p>
<p><strong>注意</strong>：当您连接搭载 Android 4.2.2（API 级别 17）或更高版本的设备时，系统会显示一个对话框，询问您是否接受允许通过此计算机进行调试的 RSA 密钥。这种安全机制可以保护用户设备，因为它可以确保用户只有在能够解锁设备并确认对话框的情况下才能执行 USB 调试和其他 adb 命令。</p>
</blockquote>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>调试手表必然要一套完整的工具，因此早有人开发出来了WearOS的工具箱，摆脱了繁琐的命令的苦恼。</p>
<p><a href="https://wearosbox.com/">WearOS工具箱 专为智能手表打造的工具箱 (wearosbox.com)</a></p>
<p>将此工具箱内的软件下载到电脑或手机上，然后再进行调试。</p>
<p><a href="https://help.wearosbox.com/">帮助中心 | WearOS 工具箱 (wearosbox.com)</a></p>
<h2 id="如何打开开发者选项"><a href="#如何打开开发者选项" class="headerlink" title="如何打开开发者选项"></a>如何打开开发者选项</h2><h3 id="Wear-OS"><a href="#Wear-OS" class="headerlink" title="Wear OS"></a>Wear OS</h3><ul>
<li><a href="https://help.wearosbox.com/connect/developer/wearos2.html">Wear OS 2.0 及更早版本</a></li>
<li><a href="https://help.wearosbox.com/connect/developer/wearos.html">Wear OS 3+</a></li>
<li>三星手表: <a href="https://help.wearosbox.com/connect/device/samsung.html">打开开发者选项和 ADB 调试</a></li>
</ul>
<h3 id="OPPO-手表"><a href="#OPPO-手表" class="headerlink" title="OPPO 手表"></a>OPPO 手表</h3><ol>
<li>进入设置-其他设置-关于手表，连续点击版本号数次，启用手表的开发者选项。</li>
<li>进入设置-其他设置-开发者选项，打开 USB 调试。</li>
</ol>
<h3 id="AOSP"><a href="#AOSP" class="headerlink" title="AOSP"></a>AOSP</h3><ol>
<li>进入设置-关于手表，连续点击版本号数次，启用手表的开发者选项。</li>
<li>进入设置-开发者选项，打开 USB 调试。</li>
</ol>
<p>打开开发选项以后，就可以选择调试方式。</p>
<h2 id="调试方式"><a href="#调试方式" class="headerlink" title="调试方式"></a>调试方式</h2><p>一般推荐使用数据线调试，其具有稳定，安全可靠的特点，并且大多数手表都支持此调试功能。</p>
<p>一些特殊的蓝牙手表能使用蓝牙调试，详情请参阅官方文档。</p>
<p><a href="https://help.wearosbox.com/connect/method/bluetooth.html">蓝牙调试 | WearOS 工具箱 (wearosbox.com)</a></p>
<h3 id="手机调试"><a href="#手机调试" class="headerlink" title="手机调试"></a>手机调试</h3><p><a href="https://help.wearosbox.com/connect/method/webadb/webadb.html">使用数据线在手机上激活 | WearOS 工具箱 (wearosbox.com)</a></p>
<p>手机调试较为繁琐，且需要购买额外部件，因此请参阅官方文档。</p>
<h3 id="PC调试"><a href="#PC调试" class="headerlink" title="PC调试"></a>PC调试</h3><p>如果是 Android 手表，在打开 ADB 调试后，还不能直接使用 WearOS 工具箱来连接。可以使用以下 ADB 命令启动网络调试。</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>Windows 需要安装驱动。</p>
<p>连接上设备，在电脑上访问如下网页，下载驱动：</p>
<p><a href="https://wearosbox.com/d.exe">https://wearosbox.com/d.exeopen in new window</a></p>
<p>然后，单击 INSTALL 安装。</p>
<p>Windows 正版用户，在插入手表后，可以直接前往系统设置下载可选驱动，以快速安装。</p>
<p>完成后，请查看设备管理器中的 ADB 设备是否已经被准确识别。</p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>本来以为这里是写的最多的，没想到现在已经有了成熟的GUI界面软件。</p>
<p>那就没什么好说的了，按照操作去点击即可。</p>
<p>不过还是简要介绍一下PC端的使用方法。</p>
<img src="/2023092317374/image-20230924104027259.png" class title="image-20230924104027259">

<p>首先，安装软件。</p>
<img src="/2023092317374/image-20230924104126129.png" class title="image-20230924104126129">

<p>可能会产生拦截通知，忽略即可。</p>
<img src="/2023092317374/image-20230924104311385.png" class title="image-20230924104311385">

<img src="/2023092317374/image-20230924104408549.png" class title="image-20230924104408549">

<img src="/2023092317374/image-20230924104524262.png" class title="image-20230924104524262">

<p>最后进入到工具箱界面。</p>
<img src="/2023092317374/image-20230924104641299.png" class title="今天要去看一下不用我">

<img src="/2023092317374/image-20230924104655677.png" class title="image-20230924104655677">

<p>如果没有安装过ADB驱动将会自动安装，图形化GUI集成了很多功能，可以更方便的调试。</p>
<p>此后的操作便是很简单的操作了，依靠文字说明提示操作即可。</p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>ADB</tag>
        <tag>手表调试</tag>
      </tags>
  </entry>
  <entry>
    <title>2023教师节</title>
    <url>/20230910f05ed6fa/</url>
    <content><![CDATA[<p>今天是2023年9月10日，是所有老师的节日——教师节。</p>
<p><strong>感谢<code>曾倩老师</code> <code>龙光森老师</code> <code>韦佳利老师</code> <code>黄佩玲老师</code> <code>李洁老师</code>  <code>林生业老师</code> <code>黄海老师</code> <code>劳永进老师</code> <code>罗满琼老师</code> <code>钟洁老师</code> <code>周静轩老师</code> <code>江英球老师</code> <code>颜良霞老师</code> <code>白振兴老师</code>  <code>庞惠文老师</code> <code>梁超源老师</code> <code>叶子斌老师</code></strong> </p>
<p>三年来的教育，每一堂课都是一份收获。</p>
<p><strong>还要感谢<code>刘靖华老师</code> <code>莫冰老师</code> <code>卜肖宁老师</code> <code>吴壮盛老师</code> <code>莫贻秋老师</code></strong></p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">obtain_coordinate</span>(<span class="params">target_word</span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取汉字的坐标</span></span><br><span class="line"><span class="string">    :param target_word:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    url = <span class="string">&quot;https://bihua.bmcx.com/web_system/bmcx_com_www/system/file/bihua/get_0/&quot;</span></span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;font&#x27;</span>: quote(target_word).replace(<span class="string">&quot;%&quot;</span>, <span class="string">&quot;&quot;</span>).lower(),</span><br><span class="line">        <span class="string">&#x27;shi_fou_zi_dong&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cache_sjs1&#x27;</span>: <span class="string">&#x27;20031914&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, params=params)</span><br><span class="line">    content = response.text</span><br><span class="line">    content = content.replace(<span class="string">&#x27;hzbh.main(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;);document.getElementById&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    content = content.split(<span class="string">&#x27;&#123;&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&quot;&#125;&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\w:\[(.+?)\]&#x27;</span>)</span><br><span class="line">    result = re.split(pattern, content)</span><br><span class="line">    order_xy_routine = []</span><br><span class="line">    words_cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">        sec = re.findall(<span class="string">r&#x27;\&#x27;.+?\&#x27;&#x27;</span>, r)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(sec):</span><br><span class="line">            orders = sec[<span class="number">1</span>].split(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> order <span class="keyword">in</span> orders:</span><br><span class="line">                order_str = re.findall(<span class="string">r&#x27;\(\d+,\d+\)&#x27;</span>, order)</span><br><span class="line">                order_xy = [<span class="built_in">eval</span>(xy) <span class="keyword">for</span> xy <span class="keyword">in</span> order_str]</span><br><span class="line">                order_xy_routine.append(order_xy)</span><br><span class="line">            words_cnt += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(order_xy_routine)</span><br><span class="line">    <span class="keyword">return</span> order_xy_routine</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_words</span>(<span class="params">target_words, startx, starty, lineNum=<span class="number">1</span></span>):  <span class="comment"># 画汉字</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    画汉字</span></span><br><span class="line"><span class="string">    :param target_words:</span></span><br><span class="line"><span class="string">    :param startx:</span></span><br><span class="line"><span class="string">    :param starty:</span></span><br><span class="line"><span class="string">    :param lineNum:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    turtle.color(<span class="string">&quot;black&quot;</span>, <span class="string">&quot;black&quot;</span>)  </span><br><span class="line">    turtle.pu()  </span><br><span class="line">    coordinates = obtain_coordinate(target_words)</span><br><span class="line">    <span class="keyword">for</span> index, coordinate <span class="keyword">in</span> <span class="built_in">enumerate</span>(coordinates):</span><br><span class="line">        turtle.goto((startx + coordinate[<span class="number">0</span>][<span class="number">0</span>])/<span class="number">2</span>, -(starty + coordinate[<span class="number">0</span>][<span class="number">1</span>])/<span class="number">2</span>)</span><br><span class="line">        turtle.pd()</span><br><span class="line">        <span class="keyword">for</span> xy <span class="keyword">in</span> coordinate:</span><br><span class="line">            x,y=xy</span><br><span class="line">            turtle.goto((startx+x)/<span class="number">2</span>, -(starty+y)/<span class="number">2</span>)</span><br><span class="line">        turtle.pu()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    turtle.screensize(<span class="number">2400</span>,<span class="number">1300</span>)</span><br><span class="line">    <span class="comment">#画汉字</span></span><br><span class="line">    word = <span class="string">&quot;教师节快乐&quot;</span></span><br><span class="line">    draw_words(word[<span class="number">0</span>], -<span class="number">1600</span>, <span class="number">0</span>)</span><br><span class="line">    draw_words(word[<span class="number">1</span>], -<span class="number">800</span>, <span class="number">0</span>)</span><br><span class="line">    draw_words(word[<span class="number">2</span>], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    draw_words(word[<span class="number">3</span>], <span class="number">800</span>, <span class="number">0</span>)</span><br><span class="line">    draw_words(word[<span class="number">4</span>], <span class="number">1600</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    turtle.done()</span><br></pre></td></tr></table></figure>

<p>谨用这些代码，来表达我的感激之情</p>
<img src="/abbrlink/1.gif" class>

<p>祝老师们</p>
<img src="/abbrlink/%E6%97%A0%E6%A0%87%E9%A2%98.png" class>



<p>​																																								黄文林</p>
<p>​																																				          2023年9月10日</p>
]]></content>
      <tags>
        <tag>教师节</tag>
      </tags>
  </entry>
  <entry>
    <title>永远的2121</title>
    <url>/2023090241024/</url>
    <content><![CDATA[<h1 id="「愿时光永驻此刻，愿明日终将重逢」"><a href="#「愿时光永驻此刻，愿明日终将重逢」" class="headerlink" title="「愿时光永驻此刻，愿明日终将重逢」"></a>「愿时光永驻此刻，愿明日终将重逢」</h1><p><img src="https://s1.ax1x.com/2023/09/03/pPDVwCD.jpg" alt="永远的2121"></p>
<p>00-曾倩</p>
<span id="more"></span>

<p>01-李慧婧</p>
<p>02-蒙军羽</p>
<p>03-梁键</p>
<p>04-陈怡佐</p>
<p>05-何子达</p>
<p>06-杨星月</p>
<p>07-符雪儿</p>
<p>08-黄科豪</p>
<p>09-林耀宗</p>
<p>10-谢    扬</p>
<p>11-王    榕</p>
<p>12-黄靖茹</p>
<p>13-刘涛赫</p>
<p>14-丁仁斌</p>
<p>15-黄文林</p>
<p>16-陈禹州</p>
<p>17-胡义航</p>
<p>18-吴志军</p>
<p>19-张华曦</p>
<p>20-梁姃</p>
<p>21-</p>
<p>22-</p>
<p>23-</p>
<p>24-</p>
<p>25-陈翰贤</p>
<p>26-滕熙雯</p>
<p>27-</p>
<p>28-</p>
<p>29-</p>
<p>30-</p>
<p>31-</p>
<p>32-</p>
<p>33-谢春霖</p>
<p>34-</p>
<p>35-龙彦霏</p>
<p>36-张士钊</p>
<p>37-</p>
<p>38-许家州</p>
<p>39-林香伶</p>
<p>40-</p>
<p>41-</p>
<p>42-翁展</p>
<p>43-</p>
<p>44-吕思良</p>
<p>45-刘穗凤</p>
<p>46-</p>
<p>47-巫奕阳</p>
<p>48-</p>
<p>49-</p>
<p>50-</p>
<p>51-</p>
<p>52-</p>
<p>53-李冠霖</p>
<p>54-晏晓晨</p>
<p>55-邓文钦</p>
<p>56-多多</p>
<p>……</p>
<p>空着的评论补充吧……</p>
<p>可能有点慢……</p>
]]></content>
      <tags>
        <tag>2121</tag>
      </tags>
  </entry>
  <entry>
    <title>关于yilia背景图片畸变问题及恒定显示解决方案</title>
    <url>/202308267350/</url>
    <content><![CDATA[<p>今天花了6个小时，只解决了一个小bugo(╥﹏╥)o</p>
<p>惨痛的故事告诉我们：</p>
<span id="more"></span>

<h1 id="升级前一定要备份！！"><a href="#升级前一定要备份！！" class="headerlink" title="升级前一定要备份！！"></a>升级前一定要备份！！</h1><p>不然就会不断的报错，而且根本找不到问题的原因。</p>
<p>最后还是<a href="boredliam.github.io">林耀宗</a>给我一份备份，并帮助我修好了bug。</p>
<p>在此十分感谢！！</p>
<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h1><p>这个bug在版本2.4.2之前一直没有成功解决，上了CSDN和知乎去询问，都没有得到满意的结果。</p>
<p>最后，我们决定自己研发出路。</p>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>以前也是尝试过使用关于yilia背景图片畸变问题及恒定显示解决方案。如果文字区域较小，是能够正常显示的。效果和现在的表现一样。</p>
<p>但是随着文章的增多，以及区域的拉长，图片开始越来越畸变。</p>
<img src="/202308267350/803140378296148.png" class width="803140378296148">

<p>可以明显的看到图片已经向左移动了。</p>
<p>这个问题在电脑端没有影响很严重。毕竟如果这么看着的话也挺好看的。</p>
<p>但是我们住图片右上角有一块青色。如果在手机端浏览的话，就会导致青色成为主颜色。会使灰色的文字很难辨认。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>进行复位后，我们决定从CSS入手</p>
<p>网上有的教程是改变body的元素，我们测试后发现没有效果。</p>
<p>目前实测成功的代码如下：</p>
<img src="/202308267350/ebac4a6352313d3f8b7b38d7877549ec.png" class title="ebac4a6352313d3f8b7b38d7877549ec">

<p>URL替换成你想要的图片，这样就可以固定住图片了，而不是图片随着文章长度拉伸。</p>
<blockquote>
<p>本文很多技术指导来源于<a href="boredliam.github.io">林耀宗</a>，非常感谢他的指导</p>
</blockquote>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>yilia</tag>
        <tag>背景</tag>
      </tags>
  </entry>
  <entry>
    <title>关于浏览器音乐自动播放的问题</title>
    <url>/2023082632320/</url>
    <content><![CDATA[<p>在我使用了网易云音乐的外部链接后，发现在edge浏览器上无法自动播放。</p>
<p>本来以为是代码问题，就没有去研究。</p>
<p>但是经过使用后发现，在一些平板上是可以自动播放的。</p>
<span id="more"></span>

<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>经过一系列研究以后，发现任何浏览器都可以自动播放，只是设置的问题。</p>
<p>部分浏览器默认允许，但有一些默认禁止（比如edge，chrome）</p>
<p>用户端的修改方法很简单，只要在设置——站点权限——自动播放——允许&#x2F;禁止中修改就可以了，</p>
<p>但是也有明显的缺点，不可能让每一个用户都这么设置。</p>
<p>而且很多浏览器都是默认设置禁止，这就意味着自动播放仍然会失效。</p>
<p>而且这是权限设置，必须由用户操作更改。</p>
<p><strong>所以理论上不可修复这一问题。</strong></p>
<h1 id="资料分析"><a href="#资料分析" class="headerlink" title="资料分析"></a>资料分析</h1><blockquote>
<p>微软 Edge 92 正式版浏览器发布后，将默认禁止网页上的音频、视频自动播放。浏览器的设置中可以看到，该选项为“限制”。</p>
<p>此外版本的 Edge 中，这一选项默认为允许。外媒表示，限制媒体自动播放，并不意味着完全阻止任何网页内容自动播放，而是根据用户使用习惯来判断。如果用户经常访问某个网站，并且允许自动播放音视频，那么浏览器将不会阻止；而对于首次访问的网站，该功能会一律禁止自动播放行为。</p>
</blockquote>
<blockquote>
<p>Chrome的自动播放政策很简单：</p>
<ul>
<li><p>始终允许静音自动播放。</p>
</li>
<li><p>在以下情况下，允许自动播放声音：</p>
</li>
<li><ul>
<li>用户已与域进行了交互（单击，点击等）。</li>
<li>在桌面版chrome上，已经超过了用户的“ <a href="https://link.zhihu.com/?target=https://developers.google.com/web/updates/2017/09/autoplay-policy-changes%23mei">媒体参与度索引”</a>阈值，这意味着该用户以前曾播放有声视频。</li>
<li>用户已将<a href="https://link.zhihu.com/?target=https://developers.google.com/web/updates/2017/02/improved-add-to-home-screen">网站添加到</a>移动设备上<a href="https://link.zhihu.com/?target=https://developers.google.com/web/updates/2017/02/improved-add-to-home-screen">的主屏幕</a>上，或在桌面上<a href="https://link.zhihu.com/?target=https://developers.google.com/web/progressive-web-apps/desktop">安装了PWA</a>。</li>
</ul>
</li>
<li><p>顶级框架可以<a href="https://link.zhihu.com/?target=https://developers.google.com/web/updates/2017/09/autoplay-policy-changes%23iframe">将自动播放权限委派</a>给其iframe，以允许自动播放声音。</p>
</li>
</ul>
<p>在以chorme为内核的浏览中，设置了<strong>MEI（Media Engagement Index）列表</strong>，该列表长度为1000，用来来衡量用户是否是该网站的“忠实用户”。当MEI排名足够高时，即可自动播放。</p>
</blockquote>
<p>现在的浏览器内核就是这两个，可以说在目前的情况下这个问题基本无法解决。</p>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>关于valine评论国际版无法提交的问题原因分析和解决方案</title>
    <url>/202308258455/</url>
    <content><![CDATA[<h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>浏览了一番文章，想写两句评论。</p>
<p>结果发现</p>
<img src="/202308258455/b5bdee774a9f033dbf0f165b78beb94b.png" class title="b5bdee774a9f033dbf0f165b78beb94b">

<p>这就有意思了，评论无法提交。</p>
<span id="more"></span>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>出现了问题，我们就去leancloud的，管理平台进行修改。</p>
<p>发现他没有定义一个实例。</p>
<h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><h3 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h3><p>为什么一定要定义一个实例才能运行呢？</p>
<p>类相当于一张汽车的「制造图纸」，你可以通过这个「图纸」来制造出许许多多汽车，甚至可以改变「图纸」，造出不同样式的汽车。</p>
<p>但是如果只有图纸，没有创建出一个真正的汽车实例，我们是永远都无法进行「开车」这个操作的。</p>
<p>可以说有了类就有了对象，就有了对对象的操作。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>办法也很简单，创建一个实例。</p>
<p><a href="https://windeling.github.io/2023/08/20/review/">valine评论搭建</a></p>
<p>可以参考这篇文章进行实例搭建。</p>
<h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>在创建完对应的实例以后，发现评论还是无法运作。</p>
<img src="/202308258455/22007b7b4e05882d35544461b15e52eb.png" class title="22007b7b4e05882d35544461b15e52eb">



<p>这里最重要的一点是云函数的问题。</p>
<p>通常发生在国际服的比较多，华北和华东服务器尚未出现过此类问题。</p>
<p>可以看到部署在华东服务器上面的实例有三个云函数，其中两个是我自己添加的。</p>
<p>但是最重要的comment函数是程序写的。</p>
<p>这个函数负责的评论的存储与管理，非常重要。</p>
<p>如果选择国际服，就有可能无法加载出这个函数。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>此 bug 是由于 LeanCloud 国际版更换 API Url 导致的，原来的 <code>us.leancloud.cn</code> 和 <code>us-api.leancloud.cn</code> 已经停用，换为了 <code>APPID前八位.api.lncldglobal.com</code> 。</p>
<h3 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h3><blockquote>
<p>① 在 <code>Valine.min.js</code> 中更换 LeanCloud 对象存储 SDK 为 最新的 <code>4.12.0</code> 版本。</p>
<p><code>leancloud-storage@3/</code> –&gt; <code>leancloud-storage@4.12.0/</code>，查找替换即可。</p>
<p>如果你使用 CDN，可以 Fork 一份 Valine 的 GitHub 仓库，然后自行更改并使用 jsdelivr CDN 。</p>
<p>我已经改好了一份：<a href="https://cdn.jsdelivr.net/gh/YidaozhanYa/Valine@test/dist/Valine.min.js">https://cdn.jsdelivr.net/gh/YidaozhanYa/Valine@test/dist/Valine.min.js</a> ，如有需要可以自取。</p>
<p>② 在引用 Valine 的 js 或 YAML 中设置 <code>serverURLs</code> 字段为 <code>APPID前八位.api.lncldglobal.com</code> 。</p>
<p>比如 <code>serverURLs: &#39;https://xxxxxxxx.api.lncldglobal.com&#39;</code></p>
</blockquote>
<p>这个是网上流传的解决办法，但是我们实际中找不到对应的文件。</p>
<p>所以这个方法看起来有点困难,但如果能找到<code>Valine.min.js</code>文件的可以尝试一下。</p>
<hr>
<p>比较简单的方法就是选择华北和华东服务器，因为服务器处在国内，比较稳定。</p>
<p>但是使用这两个服务器要遵守《中华人民共和国网络安全法》，需要进行实名备案注册。</p>
<p>而且备案注册必须使用支付宝的刷脸进行认证，优点就是成功率非常高，能够解决大部分问题。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在搭建个人博客的时候，服务器能采用国内的服务器，就尽量使用国内的服务器。</p>
<p>因为网络长城的存在及国际政治不稳定因素，很容易造成连接中断或连接被污染迟缓等等问题。</p>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>valine</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析USB系列接口</title>
    <url>/2023082436898/</url>
    <content><![CDATA[<p>「接口」一词，伴随着电子设备的产生出现在人们的视野。</p>
<p>然而如今多种多样复杂的接口也让我们烦不胜烦，今天就用一篇文章来详细介绍一下USB接口的规范。</p>
<span id="more"></span>

<h1 id="分清接口和协议"><a href="#分清接口和协议" class="headerlink" title="分清接口和协议"></a>分清接口和协议</h1><p>在正文开始之前，我们需要分清USB接口和USB协议。</p>
<p>因为不同的接口可以使用相同的协议，不分清接口和协议的话，容易造成思维的误导和混乱。</p>
<img src="/2023082436898/956a5b62c94ebcf94ca96bde388b4db2.png" class title="956a5b62c94ebcf94ca96bde388b4db2">

<p>这个就是USB的不同协议了</p>
<p>具体内容可以参照<a href="https://boredliam.github.io/2023/08/24/USB%E9%80%89%E6%8B%A9/">有关USB数据传输 | Liam’s boring life (boredliam.github.io)</a></p>
<p>总的来说，协议越高，支持的传输速率就越大，充电功率也越高。</p>
<h1 id="傻乎乎的命名方法"><a href="#傻乎乎的命名方法" class="headerlink" title="傻乎乎的命名方法"></a>傻乎乎的命名方法</h1><p>众所周知，USB组织是一个很喜欢给别人起名字的家伙。</p>
<p>在最早的时候，USB组织还是很乖巧安分的。</p>
<table>
<thead>
<tr>
<th align="center">官方命名1</th>
<th align="center">官方命名2</th>
<th align="center">官方命名3</th>
<th align="center">大众理解</th>
</tr>
</thead>
<tbody><tr>
<td align="center">USB 1.0 (1.5Mbps)</td>
<td align="center">USB 2.0 Low Speed</td>
<td align="center"></td>
<td align="center">1.0</td>
</tr>
<tr>
<td align="center">USB 1.1 (12Mbps)</td>
<td align="center">USB 2.0 Full Speed</td>
<td align="center"></td>
<td align="center">1.1</td>
</tr>
<tr>
<td align="center">USB 2.0 (480Mbps)</td>
<td align="center">USB 2.0 High Speed</td>
<td align="center"></td>
<td align="center">2.0</td>
</tr>
</tbody></table>
<p>但是USB组织开始越来越不老实了。</p>
<p>开始使用大量无所谓的名称</p>
<table>
<thead>
<tr>
<th align="right">新命名</th>
<th>旧（USB 3.2 (20Gbps) 发布期间）</th>
<th>旧（USB 3.1 (10Gbps) 发布期间）</th>
<th>原名</th>
</tr>
</thead>
<tbody><tr>
<td align="right">USB 80Gbps</td>
<td>USB4 2.0</td>
<td>USB4 Gen 2</td>
<td>USB 4 (80Gbps)</td>
</tr>
<tr>
<td align="right">USB 40Gbps</td>
<td>USB4</td>
<td>USB4</td>
<td>USB 4 (40Gbps)</td>
</tr>
<tr>
<td align="right">USB 20Gbps</td>
<td>USB 3.2 Gen2x2</td>
<td>USB 3.1 Gen2x2</td>
<td>USB 3.2 (20Gbps)</td>
</tr>
<tr>
<td align="right">USB 10Gbps</td>
<td>USB 3.2 Gen2</td>
<td>USB 3.1 Gen2</td>
<td>USB 3.1 (10Gbps)</td>
</tr>
<tr>
<td align="right">USB 5Gbps</td>
<td>USB 3.2 Gen1</td>
<td>USB 3.1 Gen1</td>
<td>USB 3.0 (5Gbps)</td>
</tr>
</tbody></table>
<p>但是现在新命名还没有普及开来</p>
<p>现在市场上大多名称都是旧版本的USB名称。</p>
<blockquote>
<p>改名成功以后，备受称赞的USB if趾高气昂地推出了全新一代USB 5.0 2x2 gen5 Supercalifragilisticexpialidocious speed with power delivery 6.0 pro max mega  super professional ultra ultimate</p>
</blockquote>
<h1 id="USB标识"><a href="#USB标识" class="headerlink" title="USB标识"></a>USB标识</h1><p>USB组织除了命名还不死心，还要推出各式各样的标识来显示自己的水平高超。</p>
<p><img src="https://pic2.zhimg.com/80/v2-db0320107ec6dae1aa2a1323cbec97e9_720w.webp" alt="img"></p>
<p>这里稍微解释一下各项命名的含义：</p>
<ul>
<li>第一列讲的是对应的最新USB协议的名称。</li>
<li>第二列讲的是印在包装盒上的彩色LOGO。</li>
<li>第三列讲的是产品接口附近的黑白LOGO。</li>
<li>第四列讲的是  即使在控制器关机下仍可进行供电的LOGO。</li>
</ul>
<p><img src="https://pic2.zhimg.com/80/v2-d773bcafd6876b20ae1b895223982685_720w.webp" alt="好"></p>
<p>这是USB充电器的标识，很明显就不多解释了。</p>
<p><img src="https://pic4.zhimg.com/80/v2-051e9426f3bbe6f1c92ed40508b6549f_720w.webp" alt="img"></p>
<p>这是USB线缆的标识，看图方法大体相同。</p>
<p>唯一值得注意的是最后一行的线缆表示不可进行数据传输。</p>
<h1 id="多种多样的接口"><a href="#多种多样的接口" class="headerlink" title="多种多样的接口"></a>多种多样的接口</h1><h2 id="Type系列"><a href="#Type系列" class="headerlink" title="Type系列"></a>Type系列</h2><p>Type系列可以是我们日常生活中接触到最多，用途最广的接口了。</p>
<img src="/2023082436898/306e45588b6f5545532e07da7e483a16.png" class>

<img src="/2023082436898/image-20230824181250623.png" class title="image-20230824181250623">

<p>这些便是我们现在的type家族。</p>
<p>有些人可能会说，好像Type-B没怎么见过。</p>
<p>事实上，Type-B接口被广泛应用于打印机，扫描仪等外部输出输入设备。</p>
<p>动手安装过打印机的同学应该很熟悉。</p>
<p>Type A和Type C自然就不用介绍了，这可是两大家喻户晓的存在。</p>
<p>但是Type C还有一点点不一样的地方，之后我们再详细展开。</p>
<h2 id="Mini系列"><a href="#Mini系列" class="headerlink" title="Mini系列"></a>Mini系列</h2><img src="/2023082436898/image-20230824181350495.png" class title="image-20230824181350495">

<p>这边是mini系列，比较少见。</p>
<p>而且随着用途的不断减少，也在逐渐退出市场。</p>
<p>最早的时候可以通过这种线实现两个不同设备之间的连接，没有主机也照样能传输数据。</p>
<p>其指标与标准USB相同，但是加入了ID针脚（用于区分设备是主机还是外设），以支持OTG。</p>
<p>主要用途在一些相机设备和MP3 MP4设备，某些老旧型号的手机也会将其作为充电口。</p>
<h2 id="Micro系列"><a href="#Micro系列" class="headerlink" title="Micro系列"></a>Micro系列</h2><p><img src="/2023082436898/Users/winde/AppData/Roaming/Typora/typora-user-images/image-20230824181408279.png" alt="image-20230824181408279"></p>
<p>Micro系列是mini系列的下一代，在同样规格的情况下提高了插拔寿命，最高可到达1万次。</p>
<p>并且减小的体积更有利于手机部署的小型化。</p>
<p>当然如果有接触移动硬盘的同学相信对 micro B系列（3.0）一定不陌生。</p>
<p>因为它也是用在移动硬盘盒上的重要接口。</p>
<p>以前很多手机用micro B作为充电和数据传输接口。</p>
<p>但是随着Type-c的普及，micro-b正在退出市场。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/a7dd2e05fad7a91243c0e86ce48fd31c.png" alt="img"></p>
<p>这张图就是USB接口的小结。</p>
<blockquote>
<p>全新的USB4 V2.0标准规范，新一代USB4 2.0接口将支持80Gbps的双向最高传输速率，以及非对称式120Gbps的最高速率</p>
</blockquote>
<p> 小提示：USB4采用了全新的拼写方法。数字和USB是紧贴起来的，如果分开，则一定指的不是USB4。</p>
<h1 id="Type-c-接口-——未来的接口"><a href="#Type-c-接口-——未来的接口" class="headerlink" title="Type-c 接口 ——未来的接口"></a>Type-c 接口 ——未来的接口</h1><p>从上面的图中我们可以看到，随着版本的不断更新，后面只支持type c接口了。</p>
<p>因为这种接口不仅触点多，数据传输能力大。而且体积小巧，方便实用。</p>
<p>type-c是这些接口中唯一能支持正反插拔的，对于用户来说体验很友好。</p>
<p>同样能支持正反插拔的苹果lightning接口，充电功率则被限制在了25w左右，传输速率也只达到了USB 2.0的水平。</p>
<p>所以type c接口也正是我们未来的接口，可以想象在未来的许多年里，type-c接口就会取代所有接口。<img src="http://5b0988e595225.cdn.sohucs.com/images/20190110/f7a4e92f489a47dfb4f5c919f00fcb0e.jpeg" alt="img"></p>
<h1 id="雷电协议"><a href="#雷电协议" class="headerlink" title="雷电协议"></a>雷电协议</h1><p>既然说了这么多USB接口了，我们来看看全新一代雷电协议。</p>
<p>注意雷电协议和雷电接口又是非常不同的两个概念。在开始之前先进行区分一下。</p>
<h2 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h2><p>雷电接口是支持雷电协议的type-c接口。（有点怪怪的）</p>
<p>为什么要说这句话？？</p>
<img src="/2023082436898/image-20230824181453268.png" class title="image-20230824181453268">

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.0e1820084728a5d7c203143fdcff2edd?rik=7zwLzmVdlgOTpQ&riu=http://img1.mydrivers.com/img/20190305/60307c47732645a89d24c4c753be976c.jpg&ehk=Zaz8T7i1c1/wJHXUgl4UT73ltfgXM0XQWSBeOVuyhe8=&risl=&pid=ImgRaw&r=0" alt="雷电多开助手"></p>
<img src="/2023082436898/image-20230824181518238.png" class title="image-20230824181518238">

<p>因为雷电协议和有的USB协议都是用type-c接口。</p>
<p>区别在于支持雷电协议的接口旁边会有一个雷电标志。</p>
<p>最新的雷电4的带宽是40Gbps，融合了PCI-E 4.0数据传输协议和DisplayPort视频协议，同时还能提供最大100W的供电能力。</p>
<p>但是USB4 2.0出来以后，速率大为提升。不过由于支持的设备较少，暂且不讨论。</p>
<p><img src="https://img2.xitongzhijia.net/allimg/210511/137-210511133309422.jpg" alt="还说"></p>
<h2 id="雷电接口的优势"><a href="#雷电接口的优势" class="headerlink" title="雷电接口的优势"></a>雷电接口的优势</h2><p>那么雷电接口最大的优势在哪里呢？</p>
<p>可以看出来反向充电一栏，雷电接口占了优势。</p>
<p>这里的反向充电不是说给国家电网充电，而是说给外接的设备供电。</p>
<p>比如通过雷电四协议，我们可以外接一个功率为15w的拓展坞，而用usb协议。我们只能连接7.5w的拓展坞。</p>
<h2 id="雷电四和雷电三"><a href="#雷电四和雷电三" class="headerlink" title="雷电四和雷电三"></a>雷电四和雷电三</h2><p>雷电4相对于雷电3，物理外观和最大速率上均没有变化。</p>
<p>同样是 USB-C 接口的设计和最高 40Gbps 的带宽，很多人可能认为雷电4就是雷电3的换皮。</p>
<p>但实际上，在视频、数据以及充电三方面，雷电4的规范和要求与雷电3都有所不同。在数据传输方面，虽然都是同样的带宽，但在雷电3中，图像信号的传输明显有着更高的优先级。雷电3给视频画面传输预留了 18Gbps 的带宽，视频画面之外的数据只剩下22Gbps。并且这个带宽划分是固定的。如果没有传输视频画面，比如只接了一组硬盘，速度照样会限制在22Gbps。</p>
<p>雷电4采用了动态带宽的分配设计，可以更有效地利用所有带宽。</p>
<p>雷电4视频输出方面最低要求是支持双4K，前代雷电3仅支持单4K。对于经常用双屏、对画质要求高的设计师来说，雷电4更友好。</p>
]]></content>
      <tags>
        <tag>电子</tag>
        <tag>USB</tag>
      </tags>
  </entry>
  <entry>
    <title>关于bad config line 1 in file的紧急bug维修及处理方案及处理方案</title>
    <url>/2023082334472/</url>
    <content><![CDATA[<p>今天尝试着安装视频插件，但是造成了网站崩溃</p>
<p>所有命令均提示异常</p>
<p><code>hexo d</code>直接报错</p>
<p>找了很久，发现一个不起眼的地方</p>
<span id="more"></span>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当时心很忙，就没有截图</p>
<p>但是报错信息是这样的</p>
<p><code>fatal: bad config line 1 in file </code></p>
<img src="/2023082334472/65b75d92d9653403790752d5f1c3cade.png" class title="65b75d92d9653403790752d5f1c3cade">

<p>这个是插件安装错误，插件是dplayer播放器</p>
<p>解决办法：使用npm卸载</p>
<p><code>npm uninstall 模块 --save</code></p>
<p>但是<code>fatal: bad config line 1 in file </code>没解决，这是关键</p>
<h1 id="C盘问题"><a href="#C盘问题" class="headerlink" title="C盘问题"></a>C盘问题</h1><p>这个情况比较特殊，没有给出路径</p>
<p>所以这些对于这个问题无用</p>
<p><a href="https://blog.csdn.net/cijiancao/article/details/80819975">git使用问题：fatal: bad config line 1 in file C:&#x2F;Users&#x2F;Administrator&#x2F;.gitconfig_cijiancao的博客-CSDN博客</a></p>
<p>需要更改C盘的教程，报错信息路径后面一定会有一个路径指向C盘</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>同样的，这个方法也可以解决hexo d时一堆warning LF的弹出显示。</p>
<p>首先删除你博客根目录下的<code>.deploy_git</code></p>
<p>然后在<code>git bash</code>中输入这一行代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>

<p>就解决了这个问题。</p>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>hexo</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>valine评论系统搭建踩坑总结</title>
    <url>/2023082063719/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终于写完评论功能了，做得很不容易，因为网上的教程五花八门，代码也不一样。</p>
<p>在搭建这个评论系统的时候，还是踩了很多坑的，在这里总结一下。</p>
<span id="more"></span>

<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h3 id="第一个坑"><a href="#第一个坑" class="headerlink" title="第一个坑"></a>第一个坑</h3><img src="/2023082063719/image-20230820210712161.png" class title="知乎">

<p>这个是代码模版，如果直接复制到文件尾部的话会导致报错，原因是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SyntaxError: Unexpected token &#x27;catch&#x27; in D:\Blog\themes\yilia\layout\_partial\ar</span><br><span class="line">ticle.ejs while compiling ejs</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们去查看一下错误代码对照表（或者翻译）</p>
<p>得到<img src="/2023082063719/image-20230820210905747.png" class title="image-20230820210905747"></p>
<p>但问题的难点在于这个代码也是正确的，所以我猜想不能插到尾部，但是这是最保险的办法。</p>
<p>所以我们使用编程中的大招：<strong>尾部添加法</strong></p>
<p>在尾部添加一个Java的结束符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<p>就可以解决问题</p>
<h3 id="第二个坑"><a href="#第二个坑" class="headerlink" title="第二个坑"></a>第二个坑</h3><p>接下来到最难的：Leancloud</p>
<hr>
<p>因为： <em><strong>Leancloud改版了！</strong></em></p>
<p>应用API的部分还算正常，但是到了部署和配置的问题就大了</p>
<p><img src="https://pic4.zhimg.com/v2-e509dd41ee51cd2ece15611f122cb067_r.jpg" alt="img"></p>
<p>上图是文章里面的介绍模版。</p>
<img src="/2023082063719/image-20230820211805232.png" class title="image-20230820211805232">

<p>这个是现在（2023.08.21）的UI设计界面</p>
<p>有些教程会建立应用，然后就会发现：</p>
<img src="/2023082063719/image-20230820211908475.png" class title="image-20230820211908475">

<p><strong>这一点也不一样啊</strong></p>
<p>而且云引擎的部分全部重新设计</p>
<img src="/2023082063719/image-20230820212007204.png" class title="image-20230820212007204">

<p>原来的云引擎里面直接有设置</p>
<p>但是现在就剩一个「部署」和一个DB</p>
<p>根据以前的经验，我们肯定去部署瞧一瞧</p>
<img src="/2023082063719/58f1186b7803163c3a0c28f9d097f330.jpg" class title="58f1186b7803163c3a0c28f9d097f330">

<p>这时候就要创建一个分组</p>
<p>然后要新建一个「类」</p>
<img src="/2023082063719/image-20230820212437483.png" class title="image-20230820212437483">

<p>有了这个类后就好办多了</p>
<p>就有了一个实例</p>
<img src="/2023082063719/image-20230820212509478.png" class title="image-20230820212509478">

<p>UI设计到这里了</p>
<p>后面就是紧跟教程了</p>
<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><img src="/2023082063719/image-20230820212613221.png" class title="image-20230820212613221">

<p>原始样子就是这样，也可以在「自定义环境变量」里修改主题</p>
<hr>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>hexo</tag>
        <tag>valine</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影作品-中越友谊公园&amp;东兴口岸</title>
    <url>/2023081836672/</url>
    <content><![CDATA[<p>摄影作品<br>中越友谊公园&amp;口岸</p>
<span id="more"></span>
<p><img src="https://www.z4a.net/images/2023/08/22/2023-08-21_7.jpg" alt="2023-08-21_7.jpg"><br><img src="https://www.z4a.net/images/2023/08/22/2023-08-21_8.jpg" alt="2023-08-21_8.jpg"><br><img src="https://www.z4a.net/images/2023/08/22/2023-08-21_6.jpg" alt="2023-08-21_6.jpg"><br><img src="https://www.z4a.net/images/2023/08/22/2023-08-21_9.jpg" alt="2023-08-21_9.jpg"><br><img src="https://www.z4a.net/images/2023/08/22/2023-08-21_2.jpg" alt="2023-08-21_2.jpg"><br><img src="https://www.z4a.net/images/2023/08/22/2023-08-21_4.jpg" alt="2023-08-21_4.jpg"><br><img src="https://www.z4a.net/images/2023/08/22/2023-08-21_5.jpg" alt="2023-08-21_5.jpg"><br><img src="https://www.z4a.net/images/2023/08/22/2023-08-21_3.jpg" alt="2023-08-21_3.jpg"><br><img src="https://www.z4a.net/images/2023/08/22/2023-08-21_1.jpg" alt="2023-08-21_1.jpg"></p>
]]></content>
      <tags>
        <tag>摄影</tag>
        <tag>Nikon D90</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023081716107/</url>
    <content><![CDATA[<p>欢迎访问HEXO，这是你的第一篇帖子。检查<a href="https://hexo.io/docs/">文件</a>了解更多信息。</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新帖子"><a href="#创建新帖子" class="headerlink" title="创建新帖子"></a>创建新帖子</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>欢迎</tag>
      </tags>
  </entry>
</search>
